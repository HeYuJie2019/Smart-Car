
xoche.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006760  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a30  08006a30  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a38  08006a38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  24000010  08006a50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000278  08006a50  00020278  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a566  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002982  00000000  00000000  0003a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0003cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  0003ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035fee  00000000  00000000  0003ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a0d  00000000  00000000  00074d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015f0c9  00000000  00000000  0008678b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e5854  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004278  00000000  00000000  001e58a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080069e0 	.word	0x080069e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080069e0 	.word	0x080069e0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 ff56 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f85c 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fb94 	bl	8000d08 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005e0:	f000 f90e 	bl	8000800 <MX_TIM1_Init>
  MX_TIM8_Init();
 80005e4:	f000 f9dc 	bl	80009a0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 faf6 	bl	8000bd8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 fb40 	bl	8000c70 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005f0:	f000 faa6 	bl	8000b40 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	4823      	ldr	r0, [pc, #140]	; (8000684 <main+0xb4>)
 80005f8:	f003 feec 	bl	80043d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80005fc:	2104      	movs	r1, #4
 80005fe:	4821      	ldr	r0, [pc, #132]	; (8000684 <main+0xb4>)
 8000600:	f003 fee8 	bl	80043d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000604:	2108      	movs	r1, #8
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <main+0xb4>)
 8000608:	f003 fee4 	bl	80043d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800060c:	210c      	movs	r1, #12
 800060e:	481d      	ldr	r0, [pc, #116]	; (8000684 <main+0xb4>)
 8000610:	f003 fee0 	bl	80043d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	481c      	ldr	r0, [pc, #112]	; (8000688 <main+0xb8>)
 8000618:	f003 fedc 	bl	80043d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 800061c:	2104      	movs	r1, #4
 800061e:	481a      	ldr	r0, [pc, #104]	; (8000688 <main+0xb8>)
 8000620:	f003 fed8 	bl	80043d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8000624:	2108      	movs	r1, #8
 8000626:	4818      	ldr	r0, [pc, #96]	; (8000688 <main+0xb8>)
 8000628:	f003 fed4 	bl	80043d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 800062c:	210c      	movs	r1, #12
 800062e:	4816      	ldr	r0, [pc, #88]	; (8000688 <main+0xb8>)
 8000630:	f003 fed0 	bl	80043d4 <HAL_TIM_PWM_Start>
//   HAL_UART_Receive_IT(&huart1,TLY,1000);
     HAL_UART_Receive_IT(&huart1,YY,1000);
 8000634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000638:	4914      	ldr	r1, [pc, #80]	; (800068c <main+0xbc>)
 800063a:	4815      	ldr	r0, [pc, #84]	; (8000690 <main+0xc0>)
 800063c:	f004 ff22 	bl	8005484 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,5);
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <main+0xb4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2205      	movs	r2, #5
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <main+0xb4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2200      	movs	r2, #0
 800064e:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <main+0xb4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <main+0xb4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	; 0x3c

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,0);
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <main+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,0);
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <main+0xb8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38

		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3,0);
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <main+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2200      	movs	r2, #0
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,0);
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <main+0xb8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	641a      	str	r2, [r3, #64]	; 0x40
	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,5);
 8000680:	e7de      	b.n	8000640 <main+0x70>
 8000682:	bf00      	nop
 8000684:	24000110 	.word	0x24000110
 8000688:	2400002c 	.word	0x2400002c
 800068c:	24000078 	.word	0x24000078
 8000690:	24000084 	.word	0x24000084

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0cc      	sub	sp, #304	; 0x130
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800069e:	224c      	movs	r2, #76	; 0x4c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 f994 	bl	80069d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006ac:	2220      	movs	r2, #32
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 f98d 	bl	80069d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4618      	mov	r0, r3
 80006bc:	23bc      	movs	r3, #188	; 0xbc
 80006be:	461a      	mov	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f006 f985 	bl	80069d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f001 fa78 	bl	8001bbc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <SystemClock_Config+0x164>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a48      	ldr	r2, [pc, #288]	; (80007f8 <SystemClock_Config+0x164>)
 80006d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <SystemClock_Config+0x164>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	4b44      	ldr	r3, [pc, #272]	; (80007fc <SystemClock_Config+0x168>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	4a43      	ldr	r2, [pc, #268]	; (80007fc <SystemClock_Config+0x168>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <SystemClock_Config+0x168>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	f003 0201 	and.w	r2, r3, #1
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000706:	bf00      	nop
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <SystemClock_Config+0x164>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000714:	d1f8      	bne.n	8000708 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000716:	2301      	movs	r3, #1
 8000718:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000736:	2378      	movs	r3, #120	; 0x78
 8000738:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800074e:	230c      	movs	r3, #12
 8000750:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fa63 	bl	8001c30 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000770:	f000 fc22 	bl	8000fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	233f      	movs	r3, #63	; 0x3f
 8000776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000786:	2308      	movs	r3, #8
 8000788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800078c:	2340      	movs	r3, #64	; 0x40
 800078e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000792:	2340      	movs	r3, #64	; 0x40
 8000794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a0:	2340      	movs	r3, #64	; 0x40
 80007a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007aa:	2104      	movs	r1, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fe4f 	bl	8002450 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x128>
  {
    Error_Handler();
 80007b8:	f000 fbfe 	bl	8000fb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2203      	movs	r2, #3
 80007c2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2200      	movs	r2, #0
 80007d2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f9f1 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x154>
  {
    Error_Handler();
 80007e4:	f000 fbe8 	bl	8000fb8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80007e8:	f001 ffe8 	bl	80027bc <HAL_RCC_EnableCSS>
}
 80007ec:	bf00      	nop
 80007ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800
 80007fc:	58000400 	.word	0x58000400

08000800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09a      	sub	sp, #104	; 0x68
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	222c      	movs	r2, #44	; 0x2c
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f006 f8c8 	bl	80069d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000840:	4b55      	ldr	r3, [pc, #340]	; (8000998 <MX_TIM1_Init+0x198>)
 8000842:	4a56      	ldr	r2, [pc, #344]	; (800099c <MX_TIM1_Init+0x19c>)
 8000844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 8000846:	4b54      	ldr	r3, [pc, #336]	; (8000998 <MX_TIM1_Init+0x198>)
 8000848:	2277      	movs	r2, #119	; 0x77
 800084a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b52      	ldr	r3, [pc, #328]	; (8000998 <MX_TIM1_Init+0x198>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000852:	4b51      	ldr	r3, [pc, #324]	; (8000998 <MX_TIM1_Init+0x198>)
 8000854:	2263      	movs	r2, #99	; 0x63
 8000856:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <MX_TIM1_Init+0x198>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085e:	4b4e      	ldr	r3, [pc, #312]	; (8000998 <MX_TIM1_Init+0x198>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <MX_TIM1_Init+0x198>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800086a:	484b      	ldr	r0, [pc, #300]	; (8000998 <MX_TIM1_Init+0x198>)
 800086c:	f003 fcfa 	bl	8004264 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000876:	f000 fb9f 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000880:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000884:	4619      	mov	r1, r3
 8000886:	4844      	ldr	r0, [pc, #272]	; (8000998 <MX_TIM1_Init+0x198>)
 8000888:	f003 ff86 	bl	8004798 <HAL_TIM_ConfigClockSource>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 fb91 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000896:	4840      	ldr	r0, [pc, #256]	; (8000998 <MX_TIM1_Init+0x198>)
 8000898:	f003 fd3b 	bl	8004312 <HAL_TIM_PWM_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008a2:	f000 fb89 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b6:	4619      	mov	r1, r3
 80008b8:	4837      	ldr	r0, [pc, #220]	; (8000998 <MX_TIM1_Init+0x198>)
 80008ba:	f004 fc8d 	bl	80051d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008c4:	f000 fb78 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c8:	2360      	movs	r3, #96	; 0x60
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	482a      	ldr	r0, [pc, #168]	; (8000998 <MX_TIM1_Init+0x198>)
 80008ee:	f003 fe43 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80008f8:	f000 fb5e 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000900:	2204      	movs	r2, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4824      	ldr	r0, [pc, #144]	; (8000998 <MX_TIM1_Init+0x198>)
 8000906:	f003 fe37 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000910:	f000 fb52 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000918:	2208      	movs	r2, #8
 800091a:	4619      	mov	r1, r3
 800091c:	481e      	ldr	r0, [pc, #120]	; (8000998 <MX_TIM1_Init+0x198>)
 800091e:	f003 fe2b 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000928:	f000 fb46 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000930:	220c      	movs	r2, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_TIM1_Init+0x198>)
 8000936:	f003 fe1f 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000940:	f000 fb3a 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM1_Init+0x198>)
 800097a:	f004 fcb5 	bl	80052e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000984:	f000 fb18 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM1_Init+0x198>)
 800098a:	f000 fb6f 	bl	800106c <HAL_TIM_MspPostInit>

}
 800098e:	bf00      	nop
 8000990:	3768      	adds	r7, #104	; 0x68
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	24000110 	.word	0x24000110
 800099c:	40010000 	.word	0x40010000

080009a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09a      	sub	sp, #104	; 0x68
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	222c      	movs	r2, #44	; 0x2c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 fff8 	bl	80069d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009e0:	4b55      	ldr	r3, [pc, #340]	; (8000b38 <MX_TIM8_Init+0x198>)
 80009e2:	4a56      	ldr	r2, [pc, #344]	; (8000b3c <MX_TIM8_Init+0x19c>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 119;
 80009e6:	4b54      	ldr	r3, [pc, #336]	; (8000b38 <MX_TIM8_Init+0x198>)
 80009e8:	2277      	movs	r2, #119	; 0x77
 80009ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <MX_TIM8_Init+0x198>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80009f2:	4b51      	ldr	r3, [pc, #324]	; (8000b38 <MX_TIM8_Init+0x198>)
 80009f4:	2263      	movs	r2, #99	; 0x63
 80009f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <MX_TIM8_Init+0x198>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009fe:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a0a:	484b      	ldr	r0, [pc, #300]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000a0c:	f003 fc2a 	bl	8004264 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000a16:	f000 facf 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a24:	4619      	mov	r1, r3
 8000a26:	4844      	ldr	r0, [pc, #272]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000a28:	f003 feb6 	bl	8004798 <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000a32:	f000 fac1 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a36:	4840      	ldr	r0, [pc, #256]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000a38:	f003 fc6b 	bl	8004312 <HAL_TIM_PWM_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000a42:	f000 fab9 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a56:	4619      	mov	r1, r3
 8000a58:	4837      	ldr	r0, [pc, #220]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000a5a:	f004 fbbd 	bl	80051d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000a64:	f000 faa8 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2360      	movs	r3, #96	; 0x60
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a70:	2300      	movs	r3, #0
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	482a      	ldr	r0, [pc, #168]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000a8e:	f003 fd73 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8000a98:	f000 fa8e 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4824      	ldr	r0, [pc, #144]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000aa6:	f003 fd67 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8000ab0:	f000 fa82 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab8:	2208      	movs	r2, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	481e      	ldr	r0, [pc, #120]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000abe:	f003 fd5b 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8000ac8:	f000 fa76 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000ad6:	f003 fd4f 	bl	8004578 <HAL_TIM_PWM_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000ae0:	f000 fa6a 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000b1a:	f004 fbe5 	bl	80052e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM8_Init+0x188>
  {
    Error_Handler();
 8000b24:	f000 fa48 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM8_Init+0x198>)
 8000b2a:	f000 fa9f 	bl	800106c <HAL_TIM_MspPostInit>

}
 8000b2e:	bf00      	nop
 8000b30:	3768      	adds	r7, #104	; 0x68
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2400002c 	.word	0x2400002c
 8000b3c:	40010400 	.word	0x40010400

08000b40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b46:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <MX_UART4_Init+0x94>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b8a:	f004 fc2b 	bl	80053e4 <HAL_UART_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b94:	f000 fa10 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000b9c:	f005 fe0f 	bl	80067be <HAL_UARTEx_SetTxFifoThreshold>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ba6:	f000 fa07 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000bae:	f005 fe44 	bl	800683a <HAL_UARTEx_SetRxFifoThreshold>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 f9fe 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_UART4_Init+0x90>)
 8000bbe:	f005 fdc5 	bl	800674c <HAL_UARTEx_DisableFifoMode>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f000 f9f6 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2400015c 	.word	0x2400015c
 8000bd4:	40004c00 	.word	0x40004c00

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <MX_USART1_UART_Init+0x94>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000be4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c22:	f004 fbdf 	bl	80053e4 <HAL_UART_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 f9c4 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c34:	f005 fdc3 	bl	80067be <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f9bb 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c46:	f005 fdf8 	bl	800683a <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 f9b2 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_USART1_UART_Init+0x90>)
 8000c56:	f005 fd79 	bl	800674c <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f9aa 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	24000084 	.word	0x24000084
 8000c6c:	40011000 	.word	0x40011000

08000c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <MX_USART2_UART_Init+0x94>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cba:	f004 fb93 	bl	80053e4 <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f978 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000ccc:	f005 fd77 	bl	80067be <HAL_UARTEx_SetTxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd6:	f000 f96f 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cde:	f005 fdac 	bl	800683a <HAL_UARTEx_SetRxFifoThreshold>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f000 f966 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_USART2_UART_Init+0x90>)
 8000cee:	f005 fd2d 	bl	800674c <HAL_UARTEx_DisableFifoMode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 f95e 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	240001e8 	.word	0x240001e8
 8000d04:	40004400 	.word	0x40004400

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	; 0x38
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	4b9d      	ldr	r3, [pc, #628]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a9b      	ldr	r2, [pc, #620]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b99      	ldr	r3, [pc, #612]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b95      	ldr	r3, [pc, #596]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a94      	ldr	r2, [pc, #592]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b91      	ldr	r3, [pc, #580]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5a:	4b8e      	ldr	r3, [pc, #568]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a8c      	ldr	r2, [pc, #560]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b8a      	ldr	r3, [pc, #552]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d78:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a85      	ldr	r2, [pc, #532]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b82      	ldr	r3, [pc, #520]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b7f      	ldr	r3, [pc, #508]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a7d      	ldr	r2, [pc, #500]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b7b      	ldr	r3, [pc, #492]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b77      	ldr	r3, [pc, #476]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a76      	ldr	r2, [pc, #472]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b73      	ldr	r3, [pc, #460]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd2:	4b70      	ldr	r3, [pc, #448]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a6e      	ldr	r2, [pc, #440]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4b68      	ldr	r3, [pc, #416]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a67      	ldr	r2, [pc, #412]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <MX_GPIO_Init+0x28c>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000e14:	4860      	ldr	r0, [pc, #384]	; (8000f98 <MX_GPIO_Init+0x290>)
 8000e16:	f000 fe93 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2103      	movs	r1, #3
 8000e1e:	485f      	ldr	r0, [pc, #380]	; (8000f9c <MX_GPIO_Init+0x294>)
 8000e20:	f000 fe8e 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000e2a:	485d      	ldr	r0, [pc, #372]	; (8000fa0 <MX_GPIO_Init+0x298>)
 8000e2c:	f000 fe88 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e36:	485b      	ldr	r0, [pc, #364]	; (8000fa4 <MX_GPIO_Init+0x29c>)
 8000e38:	f000 fe82 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8000e3c:	2373      	movs	r3, #115	; 0x73
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4854      	ldr	r0, [pc, #336]	; (8000fa0 <MX_GPIO_Init+0x298>)
 8000e50:	f000 fcc6 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4;
 8000e54:	f244 0310 	movw	r3, #16400	; 0x4010
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	484f      	ldr	r0, [pc, #316]	; (8000fa8 <MX_GPIO_Init+0x2a0>)
 8000e6a:	f000 fcb9 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF5 PF7
                           PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7
 8000e6e:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4845      	ldr	r0, [pc, #276]	; (8000f98 <MX_GPIO_Init+0x290>)
 8000e84:	f000 fcac 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4844      	ldr	r0, [pc, #272]	; (8000fac <MX_GPIO_Init+0x2a4>)
 8000e9c:	f000 fca0 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB3 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ea0:	f240 333d 	movw	r3, #829	; 0x33d
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <MX_GPIO_Init+0x29c>)
 8000eb6:	f000 fc93 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000eba:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <MX_GPIO_Init+0x290>)
 8000ed4:	f000 fc84 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY1_Pin KEY2_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 8000ed8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <MX_GPIO_Init+0x2a8>)
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	482a      	ldr	r0, [pc, #168]	; (8000f98 <MX_GPIO_Init+0x290>)
 8000eee:	f000 fc77 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4824      	ldr	r0, [pc, #144]	; (8000f9c <MX_GPIO_Init+0x294>)
 8000f0a:	f000 fc69 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000f0e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <MX_GPIO_Init+0x298>)
 8000f28:	f000 fc5a 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_GPIO_Init+0x29c>)
 8000f46:	f000 fc4b 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000f4a:	23d0      	movs	r3, #208	; 0xd0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <MX_GPIO_Init+0x2ac>)
 8000f5e:	f000 fc3f 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000f62:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <MX_GPIO_Init+0x294>)
 8000f78:	f000 fc32 	bl	80017e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2028      	movs	r0, #40	; 0x28
 8000f82:	f000 fbf8 	bl	8001776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f86:	2028      	movs	r0, #40	; 0x28
 8000f88:	f000 fc0f 	bl	80017aa <HAL_NVIC_EnableIRQ>

}
 8000f8c:	bf00      	nop
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58021400 	.word	0x58021400
 8000f9c:	58021800 	.word	0x58021800
 8000fa0:	58021000 	.word	0x58021000
 8000fa4:	58020400 	.word	0x58020400
 8000fa8:	58020800 	.word	0x58020800
 8000fac:	58020000 	.word	0x58020000
 8000fb0:	11110000 	.word	0x11110000
 8000fb4:	58020c00 	.word	0x58020c00

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>
	...

08000fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x30>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x30>)
 8000fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	58024400 	.word	0x58024400

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10f      	bne.n	800102a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 800100c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 800101c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001028:	e013      	b.n	8001052 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM8)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_TIM_Base_MspInit+0x70>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d10e      	bne.n	8001052 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 8001036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 8001046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40010000 	.word	0x40010000
 8001064:	58024400 	.word	0x58024400
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_TIM_MspPostInit+0xb8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d120      	bne.n	80010d0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_TIM_MspPostInit+0xbc>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_TIM_MspPostInit+0xbc>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_TIM_MspPostInit+0xbc>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80010ac:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010be:	2301      	movs	r3, #1
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_TIM_MspPostInit+0xc0>)
 80010ca:	f000 fb89 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80010ce:	e024      	b.n	800111a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM8)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a16      	ldr	r2, [pc, #88]	; (8001130 <HAL_TIM_MspPostInit+0xc4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d11f      	bne.n	800111a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_TIM_MspPostInit+0xbc>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <HAL_TIM_MspPostInit+0xbc>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_TIM_MspPostInit+0xbc>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800110a:	2303      	movs	r3, #3
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <HAL_TIM_MspPostInit+0xc8>)
 8001116:	f000 fb63 	bl	80017e0 <HAL_GPIO_Init>
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40010000 	.word	0x40010000
 8001128:	58024400 	.word	0x58024400
 800112c:	58021000 	.word	0x58021000
 8001130:	40010400 	.word	0x40010400
 8001134:	58020800 	.word	0x58020800

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <HAL_UART_MspInit+0x158>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12e      	bne.n	80011b8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800115c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <HAL_UART_MspInit+0x15c>)
 8001162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001166:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b46      	ldr	r3, [pc, #280]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a45      	ldr	r2, [pc, #276]	; (8001294 <HAL_UART_MspInit+0x15c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b42      	ldr	r3, [pc, #264]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001196:	2303      	movs	r3, #3
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011a6:	2308      	movs	r3, #8
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	4839      	ldr	r0, [pc, #228]	; (8001298 <HAL_UART_MspInit+0x160>)
 80011b2:	f000 fb15 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b6:	e067      	b.n	8001288 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a37      	ldr	r2, [pc, #220]	; (800129c <HAL_UART_MspInit+0x164>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12f      	bne.n	8001222 <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <HAL_UART_MspInit+0x15c>)
 80011c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011c8:	4a32      	ldr	r2, [pc, #200]	; (8001294 <HAL_UART_MspInit+0x15c>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HAL_UART_MspInit+0x15c>)
 80011d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e0:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <HAL_UART_MspInit+0x15c>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	4a2b      	ldr	r2, [pc, #172]	; (8001294 <HAL_UART_MspInit+0x15c>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_UART_MspInit+0x15c>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001210:	2304      	movs	r3, #4
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <HAL_UART_MspInit+0x168>)
 800121c:	f000 fae0 	bl	80017e0 <HAL_GPIO_Init>
}
 8001220:	e032      	b.n	8001288 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_UART_MspInit+0x16c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d12d      	bne.n	8001288 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800122e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_UART_MspInit+0x15c>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001238:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800123e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_UART_MspInit+0x15c>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_UART_MspInit+0x15c>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001268:	230c      	movs	r3, #12
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001278:	2307      	movs	r3, #7
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_UART_MspInit+0x160>)
 8001284:	f000 faac 	bl	80017e0 <HAL_GPIO_Init>
}
 8001288:	bf00      	nop
 800128a:	3738      	adds	r7, #56	; 0x38
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40004c00 	.word	0x40004c00
 8001294:	58024400 	.word	0x58024400
 8001298:	58020000 	.word	0x58020000
 800129c:	40011000 	.word	0x40011000
 80012a0:	58020400 	.word	0x58020400
 80012a4:	40004400 	.word	0x40004400

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80012ac:	f001 fc6c 	bl	8002b88 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x8>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f936 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001308:	f000 fc33 	bl	8001b72 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800130c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001310:	f000 fc2f 	bl	8001b72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <SystemInit+0xec>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a38      	ldr	r2, [pc, #224]	; (8001404 <SystemInit+0xec>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <SystemInit+0xf0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	2b06      	cmp	r3, #6
 8001336:	d807      	bhi.n	8001348 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001338:	4b33      	ldr	r3, [pc, #204]	; (8001408 <SystemInit+0xf0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 030f 	bic.w	r3, r3, #15
 8001340:	4a31      	ldr	r2, [pc, #196]	; (8001408 <SystemInit+0xf0>)
 8001342:	f043 0307 	orr.w	r3, r3, #7
 8001346:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <SystemInit+0xf4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <SystemInit+0xf4>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <SystemInit+0xf4>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <SystemInit+0xf4>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	492b      	ldr	r1, [pc, #172]	; (800140c <SystemInit+0xf4>)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <SystemInit+0xf8>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <SystemInit+0xf0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <SystemInit+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 030f 	bic.w	r3, r3, #15
 800137a:	4a23      	ldr	r2, [pc, #140]	; (8001408 <SystemInit+0xf0>)
 800137c:	f043 0307 	orr.w	r3, r3, #7
 8001380:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <SystemInit+0xf4>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <SystemInit+0xf4>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <SystemInit+0xf4>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <SystemInit+0xf4>)
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <SystemInit+0xfc>)
 8001398:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <SystemInit+0xf4>)
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <SystemInit+0x100>)
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <SystemInit+0xf4>)
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <SystemInit+0x104>)
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <SystemInit+0xf4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <SystemInit+0xf4>)
 80013ae:	4a1b      	ldr	r2, [pc, #108]	; (800141c <SystemInit+0x104>)
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <SystemInit+0xf4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <SystemInit+0xf4>)
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <SystemInit+0x104>)
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <SystemInit+0xf4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <SystemInit+0xf4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a10      	ldr	r2, [pc, #64]	; (800140c <SystemInit+0xf4>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <SystemInit+0xf4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <SystemInit+0x108>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <SystemInit+0x10c>)
 80013dc:	4013      	ands	r3, r2
 80013de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e2:	d202      	bcs.n	80013ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <SystemInit+0x110>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <SystemInit+0x114>)
 80013ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SystemInit+0xec>)
 80013f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	52002000 	.word	0x52002000
 800140c:	58024400 	.word	0x58024400
 8001410:	eaf6ed7f 	.word	0xeaf6ed7f
 8001414:	02020200 	.word	0x02020200
 8001418:	01ff0000 	.word	0x01ff0000
 800141c:	01010280 	.word	0x01010280
 8001420:	5c001000 	.word	0x5c001000
 8001424:	ffff0000 	.word	0xffff0000
 8001428:	51008108 	.word	0x51008108
 800142c:	52004000 	.word	0x52004000

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001434:	f7ff ff70 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001438:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143a:	e003      	b.n	8001444 <LoopCopyDataInit>

0800143c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800143e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001440:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001442:	3104      	adds	r1, #4

08001444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001448:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800144c:	d3f6      	bcc.n	800143c <CopyDataInit>
  ldr  r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001450:	e002      	b.n	8001458 <LoopFillZerobss>

08001452 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001452:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001454:	f842 3b04 	str.w	r3, [r2], #4

08001458 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800145a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800145c:	d3f9      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f005 fa93 	bl	8006988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff f8b5 	bl	80005d0 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800146c:	08006a40 	.word	0x08006a40
  ldr  r0, =_sdata
 8001470:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001474:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001478:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 800147c:	24000278 	.word	0x24000278

08001480 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC3_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f968 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001490:	f001 f9a4 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8001494:	4602      	mov	r2, r0
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_Init+0x68>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	4913      	ldr	r1, [pc, #76]	; (80014f0 <HAL_Init+0x6c>)
 80014a2:	5ccb      	ldrb	r3, [r1, r3]
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_Init+0x68>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_Init+0x6c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_Init+0x70>)
 80014c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x74>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f814 	bl	80014fc <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e002      	b.n	80014e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fd71 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	58024400 	.word	0x58024400
 80014f0:	08006a08 	.word	0x08006a08
 80014f4:	24000004 	.word	0x24000004
 80014f8:	24000000 	.word	0x24000000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_InitTick+0x60>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e021      	b.n	8001554 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_InitTick+0x64>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_InitTick+0x60>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f94d 	bl	80017c6 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f917 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x68>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2400000c 	.word	0x2400000c
 8001560:	24000000 	.word	0x24000000
 8001564:	24000008 	.word	0x24000008

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2400000c 	.word	0x2400000c
 800158c:	24000274 	.word	0x24000274

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	24000274 	.word	0x24000274

080015a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetREVID+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0c1b      	lsrs	r3, r3, #16
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	5c001000 	.word	0x5c001000

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x40>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	05fa0000 	.word	0x05fa0000

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff40 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff90 	bl	80016b4 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5f 	bl	8001660 <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff33 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa4 	bl	800171c <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ee:	4b89      	ldr	r3, [pc, #548]	; (8001a14 <HAL_GPIO_Init+0x234>)
 80017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017f2:	e194      	b.n	8001b1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8186 	beq.w	8001b18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d00b      	beq.n	800182c <HAL_GPIO_Init+0x4c>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d007      	beq.n	800182c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001820:	2b11      	cmp	r3, #17
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b12      	cmp	r3, #18
 800182a:	d130      	bne.n	800188e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001862:	2201      	movs	r2, #1
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 0201 	and.w	r2, r3, #1
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0xee>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d123      	bne.n	8001916 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80e0 	beq.w	8001b18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_GPIO_Init+0x238>)
 800195a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800195e:	4a2e      	ldr	r2, [pc, #184]	; (8001a18 <HAL_GPIO_Init+0x238>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_GPIO_Init+0x238>)
 800196a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001976:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <HAL_GPIO_Init+0x23c>)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	220f      	movs	r2, #15
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <HAL_GPIO_Init+0x240>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d052      	beq.n	8001a48 <HAL_GPIO_Init+0x268>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <HAL_GPIO_Init+0x244>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d031      	beq.n	8001a0e <HAL_GPIO_Init+0x22e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_GPIO_Init+0x248>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d02b      	beq.n	8001a0a <HAL_GPIO_Init+0x22a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_GPIO_Init+0x24c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d025      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_GPIO_Init+0x250>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01f      	beq.n	8001a02 <HAL_GPIO_Init+0x222>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_GPIO_Init+0x254>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d019      	beq.n	80019fe <HAL_GPIO_Init+0x21e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <HAL_GPIO_Init+0x258>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x21a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_GPIO_Init+0x25c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x216>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <HAL_GPIO_Init+0x260>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x212>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_GPIO_Init+0x264>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x20e>
 80019ea:	2309      	movs	r3, #9
 80019ec:	e02d      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019ee:	230a      	movs	r3, #10
 80019f0:	e02b      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019f2:	2308      	movs	r3, #8
 80019f4:	e029      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e027      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019fa:	2306      	movs	r3, #6
 80019fc:	e025      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 80019fe:	2305      	movs	r3, #5
 8001a00:	e023      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a02:	2304      	movs	r3, #4
 8001a04:	e021      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e01f      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e01d      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e01b      	b.n	8001a4a <HAL_GPIO_Init+0x26a>
 8001a12:	bf00      	nop
 8001a14:	58000080 	.word	0x58000080
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58000400 	.word	0x58000400
 8001a20:	58020000 	.word	0x58020000
 8001a24:	58020400 	.word	0x58020400
 8001a28:	58020800 	.word	0x58020800
 8001a2c:	58020c00 	.word	0x58020c00
 8001a30:	58021000 	.word	0x58021000
 8001a34:	58021400 	.word	0x58021400
 8001a38:	58021800 	.word	0x58021800
 8001a3c:	58021c00 	.word	0x58021c00
 8001a40:	58022000 	.word	0x58022000
 8001a44:	58022400 	.word	0x58022400
 8001a48:	2300      	movs	r3, #0
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5a:	4938      	ldr	r1, [pc, #224]	; (8001b3c <HAL_GPIO_Init+0x35c>)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f ae63 	bne.w	80017f4 <HAL_GPIO_Init+0x14>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3724      	adds	r7, #36	; 0x24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	58000400 	.word	0x58000400

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b5c:	e003      	b.n	8001b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f804 	bl	8001ba6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_PWREx_ConfigSupply+0x70>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00a      	beq.n	8001be6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_PWREx_ConfigSupply+0x70>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e01f      	b.n	8001c22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e01d      	b.n	8001c22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_PWREx_ConfigSupply+0x70>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	490f      	ldr	r1, [pc, #60]	; (8001c2c <HAL_PWREx_ConfigSupply+0x70>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001bf6:	f7ff fccb 	bl	8001590 <HAL_GetTick>
 8001bfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bfc:	e009      	b.n	8001c12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bfe:	f7ff fcc7 	bl	8001590 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c0c:	d901      	bls.n	8001c12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e007      	b.n	8001c22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_PWREx_ConfigSupply+0x70>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	58024800 	.word	0x58024800

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	; 0x30
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e3ff      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8087 	beq.w	8001d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c50:	4b99      	ldr	r3, [pc, #612]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c5a:	4b97      	ldr	r3, [pc, #604]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d007      	beq.n	8001c76 <HAL_RCC_OscConfig+0x46>
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	2b18      	cmp	r3, #24
 8001c6a:	d110      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5e>
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d10b      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c76:	4b90      	ldr	r3, [pc, #576]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d06c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x12c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d168      	bne.n	8001d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e3d9      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x76>
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a86      	ldr	r2, [pc, #536]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e02e      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x98>
 8001cae:	4b82      	ldr	r3, [pc, #520]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a81      	ldr	r2, [pc, #516]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b7f      	ldr	r3, [pc, #508]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7e      	ldr	r2, [pc, #504]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0xbc>
 8001cd2:	4b79      	ldr	r3, [pc, #484]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a78      	ldr	r2, [pc, #480]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a75      	ldr	r2, [pc, #468]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xd4>
 8001cec:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a71      	ldr	r2, [pc, #452]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fc40 	bl	8001590 <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fc3c 	bl	8001590 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e38d      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d26:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xe4>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fc2c 	bl	8001590 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fc28 	bl	8001590 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e379      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x10c>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80ae 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6c:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d76:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_RCC_OscConfig+0x162>
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	2b18      	cmp	r3, #24
 8001d86:	d13a      	bne.n	8001dfe <HAL_RCC_OscConfig+0x1ce>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d135      	bne.n	8001dfe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e34b      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	f7ff fbfd 	bl	80015a8 <HAL_GetREVID>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d817      	bhi.n	8001de8 <HAL_RCC_OscConfig+0x1b8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d108      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x1a2>
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001dc8:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd0:	e07a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	031b      	lsls	r3, r3, #12
 8001de0:	4935      	ldr	r1, [pc, #212]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de6:	e06f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	4930      	ldr	r1, [pc, #192]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	e064      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d045      	beq.n	8001e92 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0219 	bic.w	r2, r3, #25
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	4929      	ldr	r1, [pc, #164]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fbba 	bl	8001590 <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff fbb6 	bl	8001590 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e307      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	f7ff fbb3 	bl	80015a8 <HAL_GetREVID>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d817      	bhi.n	8001e7c <HAL_RCC_OscConfig+0x24c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d108      	bne.n	8001e66 <HAL_RCC_OscConfig+0x236>
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e5c:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e62:	6053      	str	r3, [r2, #4]
 8001e64:	e030      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	031b      	lsls	r3, r3, #12
 8001e74:	4910      	ldr	r1, [pc, #64]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
 8001e7a:	e025      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	490b      	ldr	r1, [pc, #44]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e01a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_RCC_OscConfig+0x288>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fb77 	bl	8001590 <HAL_GetTick>
 8001ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fb73 	bl	8001590 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d903      	bls.n	8001ebc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e2c4      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
 8001eb8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ebc:	4ba4      	ldr	r3, [pc, #656]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1ee      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a9 	beq.w	8002028 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed6:	4b9e      	ldr	r3, [pc, #632]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ede:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ee0:	4b9b      	ldr	r3, [pc, #620]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d007      	beq.n	8001efc <HAL_RCC_OscConfig+0x2cc>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b18      	cmp	r3, #24
 8001ef0:	d13a      	bne.n	8001f68 <HAL_RCC_OscConfig+0x338>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d135      	bne.n	8001f68 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001efc:	4b94      	ldr	r3, [pc, #592]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2e4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e296      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f14:	f7ff fb48 	bl	80015a8 <HAL_GetREVID>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d817      	bhi.n	8001f52 <HAL_RCC_OscConfig+0x322>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_OscConfig+0x30c>
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f32:	4a87      	ldr	r2, [pc, #540]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f38:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f3a:	e075      	b.n	8002028 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f3c:	4b84      	ldr	r3, [pc, #528]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	069b      	lsls	r3, r3, #26
 8001f4a:	4981      	ldr	r1, [pc, #516]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f50:	e06a      	b.n	8002028 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f52:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	061b      	lsls	r3, r3, #24
 8001f60:	497b      	ldr	r1, [pc, #492]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f66:	e05f      	b.n	8002028 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d042      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f70:	4b77      	ldr	r3, [pc, #476]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a76      	ldr	r2, [pc, #472]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fb08 	bl	8001590 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001f84:	f7ff fb04 	bl	8001590 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e255      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f96:	4b6e      	ldr	r3, [pc, #440]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fa2:	f7ff fb01 	bl	80015a8 <HAL_GetREVID>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d817      	bhi.n	8001fe0 <HAL_RCC_OscConfig+0x3b0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d108      	bne.n	8001fca <HAL_RCC_OscConfig+0x39a>
 8001fb8:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001fc0:	4a63      	ldr	r2, [pc, #396]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fc6:	6053      	str	r3, [r2, #4]
 8001fc8:	e02e      	b.n	8002028 <HAL_RCC_OscConfig+0x3f8>
 8001fca:	4b61      	ldr	r3, [pc, #388]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	495d      	ldr	r1, [pc, #372]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
 8001fde:	e023      	b.n	8002028 <HAL_RCC_OscConfig+0x3f8>
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	4958      	ldr	r1, [pc, #352]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
 8001ff4:	e018      	b.n	8002028 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ff6:	4b56      	ldr	r3, [pc, #344]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a55      	ldr	r2, [pc, #340]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8001ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fac5 	bl	8001590 <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800200a:	f7ff fac1 	bl	8001590 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e212      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d036      	beq.n	80020a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d019      	beq.n	8002070 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203c:	4b44      	ldr	r3, [pc, #272]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	4a43      	ldr	r2, [pc, #268]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff faa2 	bl	8001590 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fa9e 	bl	8001590 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1ef      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x420>
 800206e:	e018      	b.n	80020a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b37      	ldr	r3, [pc, #220]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	4a36      	ldr	r2, [pc, #216]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fa88 	bl	8001590 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fa84 	bl	8001590 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1d5      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d036      	beq.n	800211c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d019      	beq.n	80020ea <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 80020bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020c2:	f7ff fa65 	bl	8001590 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020ca:	f7ff fa61 	bl	8001590 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1b2      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x49a>
 80020e8:	e018      	b.n	800211c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 80020f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fa4b 	bl	8001590 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80020fe:	f7ff fa47 	bl	8001590 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e198      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCC_OscConfig+0x520>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 8085 	beq.w	8002234 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_OscConfig+0x524>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_OscConfig+0x524>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002136:	f7ff fa2b 	bl	8001590 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213c:	e00c      	b.n	8002158 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7ff fa27 	bl	8001590 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d905      	bls.n	8002158 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e178      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
 8002150:	58024400 	.word	0x58024400
 8002154:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002158:	4b96      	ldr	r3, [pc, #600]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ec      	beq.n	800213e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x54a>
 800216c:	4b92      	ldr	r3, [pc, #584]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a91      	ldr	r2, [pc, #580]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	e02d      	b.n	80021d6 <HAL_RCC_OscConfig+0x5a6>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x56c>
 8002182:	4b8d      	ldr	r3, [pc, #564]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a8c      	ldr	r2, [pc, #560]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
 800218e:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a89      	ldr	r2, [pc, #548]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	e01c      	b.n	80021d6 <HAL_RCC_OscConfig+0x5a6>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d10c      	bne.n	80021be <HAL_RCC_OscConfig+0x58e>
 80021a4:	4b84      	ldr	r3, [pc, #528]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a83      	ldr	r2, [pc, #524]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a80      	ldr	r2, [pc, #512]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x5a6>
 80021be:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a7d      	ldr	r2, [pc, #500]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	4a7a      	ldr	r2, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021d0:	f023 0304 	bic.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7ff f9d7 	bl	8001590 <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff f9d3 	bl	8001590 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e122      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021fc:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCC_OscConfig+0x5b6>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7ff f9c1 	bl	8001590 <HAL_GetTick>
 800220e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff f9bd 	bl	8001590 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e10c      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002228:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8101 	beq.w	8002440 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800223e:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002246:	2b18      	cmp	r3, #24
 8002248:	f000 80bc 	beq.w	80023c4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2b02      	cmp	r3, #2
 8002252:	f040 8095 	bne.w	8002380 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a57      	ldr	r2, [pc, #348]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800225c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7ff f995 	bl	8001590 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff f991 	bl	8001590 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0e2      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800227c:	4b4e      	ldr	r3, [pc, #312]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800228a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_RCC_OscConfig+0x78c>)
 800228e:	4013      	ands	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	430a      	orrs	r2, r1
 800229c:	4946      	ldr	r1, [pc, #280]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	628b      	str	r3, [r1, #40]	; 0x28
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	3b01      	subs	r3, #1
 80022b2:	025b      	lsls	r3, r3, #9
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	3b01      	subs	r3, #1
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022d2:	4939      	ldr	r1, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80022d8:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	4a36      	ldr	r2, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80022e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e8:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <HAL_RCC_OscConfig+0x790>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022f0:	00d2      	lsls	r2, r2, #3
 80022f2:	4931      	ldr	r1, [pc, #196]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f023 020c 	bic.w	r2, r3, #12
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	492c      	ldr	r1, [pc, #176]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002306:	4313      	orrs	r3, r2
 8002308:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f023 0202 	bic.w	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4928      	ldr	r1, [pc, #160]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002318:	4313      	orrs	r3, r2
 800231a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800232e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800233a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff f91a 	bl	8001590 <HAL_GetTick>
 800235c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002360:	f7ff f916 	bl	8001590 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e067      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x730>
 800237e:	e05f      	b.n	8002440 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 8002386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff f900 	bl	8001590 <HAL_GetTick>
 8002390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff f8fc 	bl	8001590 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e04d      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <HAL_RCC_OscConfig+0x788>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x764>
 80023b2:	e045      	b.n	8002440 <HAL_RCC_OscConfig+0x810>
 80023b4:	58024800 	.word	0x58024800
 80023b8:	58024400 	.word	0x58024400
 80023bc:	fffffc0c 	.word	0xfffffc0c
 80023c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCC_OscConfig+0x81c>)
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_OscConfig+0x81c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d031      	beq.n	800243c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d12a      	bne.n	800243c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d122      	bne.n	800243c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d11a      	bne.n	800243c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	0a5b      	lsrs	r3, r3, #9
 800240a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d111      	bne.n	800243c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d108      	bne.n	800243c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	0e1b      	lsrs	r3, r3, #24
 800242e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3730      	adds	r7, #48	; 0x30
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	58024400 	.word	0x58024400

08002450 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e19c      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b8a      	ldr	r3, [pc, #552]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d910      	bls.n	8002494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b87      	ldr	r3, [pc, #540]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 020f 	bic.w	r2, r3, #15
 800247a:	4985      	ldr	r1, [pc, #532]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b83      	ldr	r3, [pc, #524]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e184      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	4b7b      	ldr	r3, [pc, #492]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d908      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	4975      	ldr	r1, [pc, #468]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	4b70      	ldr	r3, [pc, #448]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024da:	429a      	cmp	r2, r3
 80024dc:	d908      	bls.n	80024f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	496a      	ldr	r1, [pc, #424]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	4b64      	ldr	r3, [pc, #400]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002508:	429a      	cmp	r2, r3
 800250a:	d908      	bls.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	495e      	ldr	r1, [pc, #376]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 800251a:	4313      	orrs	r3, r2
 800251c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69da      	ldr	r2, [r3, #28]
 800252e:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002536:	429a      	cmp	r2, r3
 8002538:	d908      	bls.n	800254c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800253a:	4b56      	ldr	r3, [pc, #344]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4953      	ldr	r1, [pc, #332]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002548:	4313      	orrs	r3, r2
 800254a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	429a      	cmp	r2, r3
 8002566:	d908      	bls.n	800257a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f023 020f 	bic.w	r2, r3, #15
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4947      	ldr	r1, [pc, #284]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002576:	4313      	orrs	r3, r2
 8002578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d055      	beq.n	8002632 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002586:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	4940      	ldr	r1, [pc, #256]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002594:	4313      	orrs	r3, r2
 8002596:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a0:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d121      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0f6      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d115      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0ea      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0de      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0d6      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f023 0207 	bic.w	r2, r3, #7
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4925      	ldr	r1, [pc, #148]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe ffc5 	bl	8001590 <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002608:	e00a      	b.n	8002620 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260a:	f7fe ffc1 	bl	8001590 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0be      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	429a      	cmp	r2, r3
 8002630:	d1eb      	bne.n	800260a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	429a      	cmp	r2, r3
 800264c:	d208      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	490e      	ldr	r1, [pc, #56]	; (8002694 <HAL_RCC_ClockConfig+0x244>)
 800265c:	4313      	orrs	r3, r2
 800265e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d214      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 020f 	bic.w	r2, r3, #15
 8002676:	4906      	ldr	r1, [pc, #24]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <HAL_RCC_ClockConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e086      	b.n	800279e <HAL_RCC_ClockConfig+0x34e>
 8002690:	52002000 	.word	0x52002000
 8002694:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d010      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d208      	bcs.n	80026c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026b4:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	4939      	ldr	r1, [pc, #228]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d010      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026de:	429a      	cmp	r2, r3
 80026e0:	d208      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	492e      	ldr	r1, [pc, #184]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d010      	beq.n	8002722 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800270c:	429a      	cmp	r2, r3
 800270e:	d208      	bcs.n	8002722 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 800271e:	4313      	orrs	r3, r2
 8002720:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800273a:	429a      	cmp	r2, r3
 800273c:	d208      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4917      	ldr	r1, [pc, #92]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 800274c:	4313      	orrs	r3, r2
 800274e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002750:	f000 f844 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	4912      	ldr	r1, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x35c>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x358>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_RCC_ClockConfig+0x35c>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x360>)
 8002786:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x364>)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x368>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe feb2 	bl	80014fc <HAL_InitTick>
 8002798:	4603      	mov	r3, r0
 800279a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	58024400 	.word	0x58024400
 80027ac:	08006a08 	.word	0x08006a08
 80027b0:	24000004 	.word	0x24000004
 80027b4:	24000000 	.word	0x24000000
 80027b8:	24000008 	.word	0x24000008

080027bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_EnableCSS+0x1c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_RCC_EnableCSS+0x1c>)
 80027c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	58024400 	.word	0x58024400

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e2:	4bb3      	ldr	r3, [pc, #716]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ea:	2b18      	cmp	r3, #24
 80027ec:	f200 8155 	bhi.w	8002a9a <HAL_RCC_GetSysClockFreq+0x2be>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	0800285d 	.word	0x0800285d
 80027fc:	08002a9b 	.word	0x08002a9b
 8002800:	08002a9b 	.word	0x08002a9b
 8002804:	08002a9b 	.word	0x08002a9b
 8002808:	08002a9b 	.word	0x08002a9b
 800280c:	08002a9b 	.word	0x08002a9b
 8002810:	08002a9b 	.word	0x08002a9b
 8002814:	08002a9b 	.word	0x08002a9b
 8002818:	08002883 	.word	0x08002883
 800281c:	08002a9b 	.word	0x08002a9b
 8002820:	08002a9b 	.word	0x08002a9b
 8002824:	08002a9b 	.word	0x08002a9b
 8002828:	08002a9b 	.word	0x08002a9b
 800282c:	08002a9b 	.word	0x08002a9b
 8002830:	08002a9b 	.word	0x08002a9b
 8002834:	08002a9b 	.word	0x08002a9b
 8002838:	08002889 	.word	0x08002889
 800283c:	08002a9b 	.word	0x08002a9b
 8002840:	08002a9b 	.word	0x08002a9b
 8002844:	08002a9b 	.word	0x08002a9b
 8002848:	08002a9b 	.word	0x08002a9b
 800284c:	08002a9b 	.word	0x08002a9b
 8002850:	08002a9b 	.word	0x08002a9b
 8002854:	08002a9b 	.word	0x08002a9b
 8002858:	0800288f 	.word	0x0800288f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800285c:	4b94      	ldr	r3, [pc, #592]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002868:	4b91      	ldr	r3, [pc, #580]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800287a:	e111      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800287c:	4b8d      	ldr	r3, [pc, #564]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800287e:	61bb      	str	r3, [r7, #24]
    break;
 8002880:	e10e      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002882:	4b8d      	ldr	r3, [pc, #564]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002884:	61bb      	str	r3, [r7, #24]
    break;
 8002886:	e10b      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002888:	4b8c      	ldr	r3, [pc, #560]	; (8002abc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800288a:	61bb      	str	r3, [r7, #24]
    break;
 800288c:	e108      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800288e:	4b88      	ldr	r3, [pc, #544]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002898:	4b85      	ldr	r3, [pc, #532]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028a4:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028ae:	4b80      	ldr	r3, [pc, #512]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	ee07 3a90 	vmov	s15, r3
 80028c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80e1 	beq.w	8002a94 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	f000 8083 	beq.w	80029e0 <HAL_RCC_GetSysClockFreq+0x204>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	f200 80a1 	bhi.w	8002a24 <HAL_RCC_GetSysClockFreq+0x248>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x114>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d056      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x1c0>
 80028ee:	e099      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028f0:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d02d      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80028fc:	4b6c      	ldr	r3, [pc, #432]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	08db      	lsrs	r3, r3, #3
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	4a6b      	ldr	r2, [pc, #428]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002926:	4b62      	ldr	r3, [pc, #392]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002936:	ed97 6a02 	vldr	s12, [r7, #8]
 800293a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002956:	e087      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002ac4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296a:	4b51      	ldr	r3, [pc, #324]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297a:	ed97 6a02 	vldr	s12, [r7, #8]
 800297e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800298e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800299a:	e065      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ac8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ae:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029be:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029de:	e043      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002acc <HAL_RCC_GetSysClockFreq+0x2f0>
 80029ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a22:	e021      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ac8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ac0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	0a5b      	lsrs	r3, r3, #9
 8002a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a72:	3301      	adds	r3, #1
 8002a74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a80:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a8c:	ee17 3a90 	vmov	r3, s15
 8002a90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002a92:	e005      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
    break;
 8002a98:	e002      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a9c:	61bb      	str	r3, [r7, #24]
    break;
 8002a9e:	bf00      	nop
  }

  return sysclockfreq;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	03d09000 	.word	0x03d09000
 8002ab8:	003d0900 	.word	0x003d0900
 8002abc:	007a1200 	.word	0x007a1200
 8002ac0:	46000000 	.word	0x46000000
 8002ac4:	4c742400 	.word	0x4c742400
 8002ac8:	4a742400 	.word	0x4a742400
 8002acc:	4af42400 	.word	0x4af42400

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ad6:	f7ff fe81 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	490f      	ldr	r1, [pc, #60]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	58024400 	.word	0x58024400
 8002b24:	08006a08 	.word	0x08006a08
 8002b28:	24000004 	.word	0x24000004
 8002b2c:	24000000 	.word	0x24000000

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b34:	f7ff ffcc 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	58024400 	.word	0x58024400
 8002b58:	08006a08 	.word	0x08006a08

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b60:	f7ff ffb6 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	58024400 	.word	0x58024400
 8002b84:	08006a08 	.word	0x08006a08

08002b88 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCC_NMI_IRQHandler+0x24>)
 8002b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d105      	bne.n	8002ba6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8002b9a:	f000 f809 	bl	8002bb0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002b9e:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_NMI_IRQHandler+0x24>)
 8002ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	58024400 	.word	0x58024400

08002bb0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc8:	2300      	movs	r3, #0
 8002bca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03f      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002be4:	d02a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002be6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bea:	d824      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf0:	d018      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf6:	d81e      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c00:	d007      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c02:	e018      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c04:	4bab      	ldr	r3, [pc, #684]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	4aaa      	ldr	r2, [pc, #680]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c10:	e015      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f9bf 	bl	8003f9c <RCCEx_PLL2_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c22:	e00c      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3324      	adds	r3, #36	; 0x24
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 fa68 	bl	8004100 <RCCEx_PLL3_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c34:	e003      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
      break;
 8002c3a:	e000      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c44:	4b9b      	ldr	r3, [pc, #620]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c50:	4998      	ldr	r1, [pc, #608]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	650b      	str	r3, [r1, #80]	; 0x50
 8002c56:	e001      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d03d      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d826      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002c8d 	.word	0x08002c8d
 8002c7c:	08002c9b 	.word	0x08002c9b
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002cc5 	.word	0x08002cc5
 8002c88:	08002cc5 	.word	0x08002cc5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c8c:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	4a88      	ldr	r2, [pc, #544]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c98:	e015      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 f97b 	bl	8003f9c <RCCEx_PLL2_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002caa:	e00c      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fa24 	bl	8004100 <RCCEx_PLL3_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cbc:	e003      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	f023 0207 	bic.w	r2, r3, #7
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	4976      	ldr	r1, [pc, #472]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8002cde:	e001      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
 8002ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d042      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf8:	d02b      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfe:	d825      	bhi.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d00:	2bc0      	cmp	r3, #192	; 0xc0
 8002d02:	d028      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002d04:	2bc0      	cmp	r3, #192	; 0xc0
 8002d06:	d821      	bhi.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d08:	2b80      	cmp	r3, #128	; 0x80
 8002d0a:	d016      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002d0c:	2b80      	cmp	r3, #128	; 0x80
 8002d0e:	d81d      	bhi.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d007      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d18:	e018      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d1a:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002d26:	e017      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 f934 	bl	8003f9c <RCCEx_PLL2_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002d38:	e00e      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3324      	adds	r3, #36	; 0x24
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f9dd 	bl	8004100 <RCCEx_PLL3_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002d4a:	e005      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d50:	e002      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d5e:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	4952      	ldr	r1, [pc, #328]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	650b      	str	r3, [r1, #80]	; 0x50
 8002d70:	e001      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d049      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d8c:	d030      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d92:	d82a      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d98:	d02c      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002d9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d9e:	d824      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da4:	d018      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002daa:	d81e      	bhi.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002db4:	d007      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002db6:	e018      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db8:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	4a3d      	ldr	r2, [pc, #244]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dc4:	e017      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 f8e5 	bl	8003f9c <RCCEx_PLL2_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002dd6:	e00e      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3324      	adds	r3, #36	; 0x24
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f98e 	bl	8004100 <RCCEx_PLL3_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002de8:	e005      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e0a:	492a      	ldr	r1, [pc, #168]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	658b      	str	r3, [r1, #88]	; 0x58
 8002e10:	e001      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d04c      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e2c:	d030      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e32:	d82a      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e38:	d02c      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002e3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e3e:	d824      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e44:	d018      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e4a:	d81e      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e54:	d007      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002e56:	e018      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e58:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e64:	e017      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 f895 	bl	8003f9c <RCCEx_PLL2_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002e76:	e00e      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f93e 	bl	8004100 <RCCEx_PLL3_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e88:	e005      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002e90:	bf00      	nop
 8002e92:	e000      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002eaa:	4902      	ldr	r1, [pc, #8]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	658b      	str	r3, [r1, #88]	; 0x58
 8002eb0:	e004      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002eb2:	bf00      	nop
 8002eb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d032      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	2b30      	cmp	r3, #48	; 0x30
 8002ece:	d01c      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ed0:	2b30      	cmp	r3, #48	; 0x30
 8002ed2:	d817      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d813      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d10f      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee4:	4baf      	ldr	r3, [pc, #700]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4aae      	ldr	r2, [pc, #696]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 f84f 	bl	8003f9c <RCCEx_PLL2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002f02:	e005      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f16:	4ba3      	ldr	r3, [pc, #652]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f22:	49a0      	ldr	r1, [pc, #640]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f28:	e001      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d047      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f42:	d030      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f48:	d82a      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002f4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f4e:	d02c      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f54:	d824      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5a:	d018      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f60:	d81e      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6a:	d007      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002f6c:	e018      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6e:	4b8d      	ldr	r3, [pc, #564]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	4a8c      	ldr	r2, [pc, #560]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f7a:	e017      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 f80a 	bl	8003f9c <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f8c:	e00e      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3324      	adds	r3, #36	; 0x24
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 f8b3 	bl	8004100 <RCCEx_PLL3_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f9e:	e005      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa4:	e002      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	4979      	ldr	r1, [pc, #484]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	650b      	str	r3, [r1, #80]	; 0x50
 8002fc4:	e001      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d049      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fde:	d02e      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	d828      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002fe6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fea:	d02a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff0:	d822      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002ff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ff6:	d026      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002ff8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ffc:	d81c      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003002:	d010      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003008:	d816      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01d      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003012:	d111      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ffbe 	bl	8003f9c <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003024:	e012      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f001 f867 	bl	8004100 <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003036:	e009      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e006      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800303e:	bf00      	nop
 8003040:	e004      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800304a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003052:	4b54      	ldr	r3, [pc, #336]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	4951      	ldr	r1, [pc, #324]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	650b      	str	r3, [r1, #80]	; 0x50
 8003064:	e001      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d04b      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800307c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003080:	d02e      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003086:	d828      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d02a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d822      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003094:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003098:	d026      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800309a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800309e:	d81c      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a4:	d010      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80030a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030aa:	d816      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01d      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80030b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b4:	d111      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 ff6d 	bl	8003f9c <RCCEx_PLL2_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80030c6:	e012      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f816 	bl	8004100 <RCCEx_PLL3_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80030d8:	e009      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
      break;
 80030de:	e006      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80030e0:	bf00      	nop
 80030e2:	e004      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80030e4:	bf00      	nop
 80030e6:	e002      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80030e8:	bf00      	nop
 80030ea:	e000      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80030ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003102:	4928      	ldr	r1, [pc, #160]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	658b      	str	r3, [r1, #88]	; 0x58
 8003108:	e001      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02f      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003122:	d00e      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003128:	d814      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800312e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003132:	d10f      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800313a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003140:	e00c      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f000 ff27 	bl	8003f9c <RCCEx_PLL2_Config>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003152:	e003      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
      break;
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800315a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003166:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316e:	490d      	ldr	r1, [pc, #52]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	650b      	str	r3, [r1, #80]	; 0x50
 8003174:	e001      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d033      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	2b03      	cmp	r3, #3
 800318c:	d81c      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800318e:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031cf 	.word	0x080031cf
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031b7 	.word	0x080031b7
 80031a0:	080031cf 	.word	0x080031cf
 80031a4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a8:	4bb8      	ldr	r3, [pc, #736]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	4ab7      	ldr	r2, [pc, #732]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80031b4:	e00c      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2102      	movs	r1, #2
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 feed 	bl	8003f9c <RCCEx_PLL2_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80031c6:	e003      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]
      break;
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80031ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80031d6:	4bad      	ldr	r3, [pc, #692]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	49aa      	ldr	r1, [pc, #680]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031e8:	e001      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8086 	beq.w	8003308 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fc:	4ba4      	ldr	r3, [pc, #656]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4aa3      	ldr	r2, [pc, #652]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003206:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003208:	f7fe f9c2 	bl	8001590 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800320e:	e009      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003210:	f7fe f9be 	bl	8001590 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d902      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	75fb      	strb	r3, [r7, #23]
        break;
 8003222:	e005      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003224:	4b9a      	ldr	r3, [pc, #616]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ef      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d166      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003236:	4b95      	ldr	r3, [pc, #596]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003240:	4053      	eors	r3, r2
 8003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003246:	2b00      	cmp	r3, #0
 8003248:	d013      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800324a:	4b90      	ldr	r3, [pc, #576]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003252:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003254:	4b8d      	ldr	r3, [pc, #564]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a8c      	ldr	r2, [pc, #560]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800325a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003260:	4b8a      	ldr	r3, [pc, #552]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a89      	ldr	r2, [pc, #548]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800326c:	4a87      	ldr	r2, [pc, #540]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327c:	d115      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe f987 	bl	8001590 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003284:	e00b      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe f983 	bl	8001590 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d902      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	75fb      	strb	r3, [r7, #23]
            break;
 800329c:	e005      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800329e:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0ed      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d126      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032be:	d10d      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80032c0:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032ce:	0919      	lsrs	r1, r3, #4
 80032d0:	4b70      	ldr	r3, [pc, #448]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	496d      	ldr	r1, [pc, #436]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	610b      	str	r3, [r1, #16]
 80032da:	e005      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032e6:	6113      	str	r3, [r2, #16]
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f6:	4965      	ldr	r1, [pc, #404]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	670b      	str	r3, [r1, #112]	; 0x70
 80032fc:	e004      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	75bb      	strb	r3, [r7, #22]
 8003302:	e001      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d07e      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003318:	2b28      	cmp	r3, #40	; 0x28
 800331a:	d867      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	080033f3 	.word	0x080033f3
 8003328:	080033ed 	.word	0x080033ed
 800332c:	080033ed 	.word	0x080033ed
 8003330:	080033ed 	.word	0x080033ed
 8003334:	080033ed 	.word	0x080033ed
 8003338:	080033ed 	.word	0x080033ed
 800333c:	080033ed 	.word	0x080033ed
 8003340:	080033ed 	.word	0x080033ed
 8003344:	080033c9 	.word	0x080033c9
 8003348:	080033ed 	.word	0x080033ed
 800334c:	080033ed 	.word	0x080033ed
 8003350:	080033ed 	.word	0x080033ed
 8003354:	080033ed 	.word	0x080033ed
 8003358:	080033ed 	.word	0x080033ed
 800335c:	080033ed 	.word	0x080033ed
 8003360:	080033ed 	.word	0x080033ed
 8003364:	080033db 	.word	0x080033db
 8003368:	080033ed 	.word	0x080033ed
 800336c:	080033ed 	.word	0x080033ed
 8003370:	080033ed 	.word	0x080033ed
 8003374:	080033ed 	.word	0x080033ed
 8003378:	080033ed 	.word	0x080033ed
 800337c:	080033ed 	.word	0x080033ed
 8003380:	080033ed 	.word	0x080033ed
 8003384:	080033f3 	.word	0x080033f3
 8003388:	080033ed 	.word	0x080033ed
 800338c:	080033ed 	.word	0x080033ed
 8003390:	080033ed 	.word	0x080033ed
 8003394:	080033ed 	.word	0x080033ed
 8003398:	080033ed 	.word	0x080033ed
 800339c:	080033ed 	.word	0x080033ed
 80033a0:	080033ed 	.word	0x080033ed
 80033a4:	080033f3 	.word	0x080033f3
 80033a8:	080033ed 	.word	0x080033ed
 80033ac:	080033ed 	.word	0x080033ed
 80033b0:	080033ed 	.word	0x080033ed
 80033b4:	080033ed 	.word	0x080033ed
 80033b8:	080033ed 	.word	0x080033ed
 80033bc:	080033ed 	.word	0x080033ed
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	080033f3 	.word	0x080033f3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fde4 	bl	8003f9c <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80033d8:	e00c      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3324      	adds	r3, #36	; 0x24
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fe8d 	bl	8004100 <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80033ea:	e003      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]
      break;
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80033f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003406:	4921      	ldr	r1, [pc, #132]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	654b      	str	r3, [r1, #84]	; 0x54
 800340c:	e001      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03e      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	2b05      	cmp	r3, #5
 8003424:	d820      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800346f 	.word	0x0800346f
 8003430:	08003445 	.word	0x08003445
 8003434:	08003457 	.word	0x08003457
 8003438:	0800346f 	.word	0x0800346f
 800343c:	0800346f 	.word	0x0800346f
 8003440:	0800346f 	.word	0x0800346f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fda6 	bl	8003f9c <RCCEx_PLL2_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003454:	e00c      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3324      	adds	r3, #36	; 0x24
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fe4f 	bl	8004100 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003466:	e003      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800346e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d110      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003482:	4902      	ldr	r1, [pc, #8]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	654b      	str	r3, [r1, #84]	; 0x54
 8003488:	e008      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800348a:	bf00      	nop
 800348c:	58024400 	.word	0x58024400
 8003490:	58024800 	.word	0x58024800
 8003494:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d039      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d820      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034fb 	.word	0x080034fb
 80034bc:	080034d1 	.word	0x080034d1
 80034c0:	080034e3 	.word	0x080034e3
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fd60 	bl	8003f9c <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80034e0:	e00c      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3324      	adds	r3, #36	; 0x24
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fe09 	bl	8004100 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80034f2:	e003      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	75fb      	strb	r3, [r7, #23]
      break;
 80034f8:	e000      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80034fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003502:	4bb7      	ldr	r3, [pc, #732]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	49b3      	ldr	r1, [pc, #716]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003512:	4313      	orrs	r3, r2
 8003514:	658b      	str	r3, [r1, #88]	; 0x58
 8003516:	e001      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d04b      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003532:	d02e      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003538:	d828      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353e:	d02a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d822      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003546:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800354a:	d026      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800354c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003550:	d81c      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003556:	d010      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355c:	d816      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01d      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003566:	d111      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fd14 	bl	8003f9c <RCCEx_PLL2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003578:	e012      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3324      	adds	r3, #36	; 0x24
 800357e:	2102      	movs	r1, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fdbd 	bl	8004100 <RCCEx_PLL3_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800358a:	e009      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	75fb      	strb	r3, [r7, #23]
      break;
 8003590:	e006      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003592:	bf00      	nop
 8003594:	e004      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800359e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a6:	4b8e      	ldr	r3, [pc, #568]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	498a      	ldr	r1, [pc, #552]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	654b      	str	r3, [r1, #84]	; 0x54
 80035ba:	e001      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d04b      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035d6:	d02e      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80035d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035dc:	d828      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d02a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e8:	d822      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80035ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ee:	d026      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80035f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035f4:	d81c      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d010      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80035fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003600:	d816      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01d      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360a:	d111      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fcc2 	bl	8003f9c <RCCEx_PLL2_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800361c:	e012      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3324      	adds	r3, #36	; 0x24
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fd6b 	bl	8004100 <RCCEx_PLL3_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800362e:	e009      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
      break;
 8003634:	e006      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003636:	bf00      	nop
 8003638:	e004      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800363a:	bf00      	nop
 800363c:	e002      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800364a:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003658:	4961      	ldr	r1, [pc, #388]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800365a:	4313      	orrs	r3, r2
 800365c:	658b      	str	r3, [r1, #88]	; 0x58
 800365e:	e001      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d04b      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003676:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800367a:	d02e      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800367c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003680:	d828      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003686:	d02a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	d822      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800368e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003692:	d026      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003694:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003698:	d81c      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800369a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800369e:	d010      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a4:	d816      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01d      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80036aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ae:	d111      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fc70 	bl	8003f9c <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80036c0:	e012      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3324      	adds	r3, #36	; 0x24
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fd19 	bl	8004100 <RCCEx_PLL3_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80036d2:	e009      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
      break;
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80036da:	bf00      	nop
 80036dc:	e004      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80036e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036fc:	4938      	ldr	r1, [pc, #224]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	658b      	str	r3, [r1, #88]	; 0x58
 8003702:	e001      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	d10a      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fcea 	bl	8004100 <RCCEx_PLL3_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003744:	4926      	ldr	r1, [pc, #152]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003746:	4313      	orrs	r3, r2
 8003748:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003760:	d10a      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3324      	adds	r3, #36	; 0x24
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fcc9 	bl	8004100 <RCCEx_PLL3_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003786:	4916      	ldr	r1, [pc, #88]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003788:	4313      	orrs	r3, r2
 800378a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d036      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800379e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80037a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037a8:	d817      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d009      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80037b4:	e011      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fbed 	bl	8003f9c <RCCEx_PLL2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80037c6:	e00e      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3324      	adds	r3, #36	; 0x24
 80037cc:	2102      	movs	r1, #2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fc96 	bl	8004100 <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80037d8:	e005      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80037e0:	58024400 	.word	0x58024400
      break;
 80037e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ec:	4b8b      	ldr	r3, [pc, #556]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037fa:	4988      	ldr	r1, [pc, #544]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	658b      	str	r3, [r1, #88]	; 0x58
 8003800:	e001      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d033      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800381c:	d01c      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800381e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003822:	d816      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003828:	d003      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800382a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800382e:	d007      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003830:	e00f      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003832:	4b7a      	ldr	r3, [pc, #488]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	4a79      	ldr	r2, [pc, #484]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800383e:	e00c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3324      	adds	r3, #36	; 0x24
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fc5a 	bl	8004100 <RCCEx_PLL3_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	75fb      	strb	r3, [r7, #23]
      break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003860:	4b6e      	ldr	r3, [pc, #440]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386e:	496b      	ldr	r1, [pc, #428]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	654b      	str	r3, [r1, #84]	; 0x54
 8003874:	e001      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d029      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800388e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003892:	d007      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003894:	e00f      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003896:	4b61      	ldr	r3, [pc, #388]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	4a60      	ldr	r2, [pc, #384]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800389c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80038a2:	e00b      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fb76 	bl	8003f9c <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80038c2:	4b56      	ldr	r3, [pc, #344]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	4953      	ldr	r1, [pc, #332]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038d4:	e001      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3324      	adds	r3, #36	; 0x24
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fc07 	bl	8004100 <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d030      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d017      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003916:	d811      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d013      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d80b      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d106      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a3a      	ldr	r2, [pc, #232]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800393a:	e007      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	75fb      	strb	r3, [r7, #23]
      break;
 8003940:	e004      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003952:	4b32      	ldr	r3, [pc, #200]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395e:	492f      	ldr	r1, [pc, #188]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003960:	4313      	orrs	r3, r2
 8003962:	654b      	str	r3, [r1, #84]	; 0x54
 8003964:	e001      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4926      	ldr	r1, [pc, #152]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003984:	4313      	orrs	r3, r2
 8003986:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039a2:	491e      	ldr	r1, [pc, #120]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039dc:	6113      	str	r3, [r2, #16]
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80039e8:	490c      	ldr	r1, [pc, #48]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da08      	bge.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003a08:	7dbb      	ldrb	r3, [r7, #22]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	58024400 	.word	0x58024400

08003a20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a24:	f7ff f854 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4904      	ldr	r1, [pc, #16]	; (8003a48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	58024400 	.word	0x58024400
 8003a48:	08006a08 	.word	0x08006a08

08003a4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a54:	4ba1      	ldr	r3, [pc, #644]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003a5e:	4b9f      	ldr	r3, [pc, #636]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	0b1b      	lsrs	r3, r3, #12
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a6a:	4b9c      	ldr	r3, [pc, #624]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003a76:	4b99      	ldr	r3, [pc, #612]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8111 	beq.w	8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	f000 8083 	beq.w	8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f200 80a1 	bhi.w	8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d056      	beq.n	8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ab6:	e099      	b.n	8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab8:	4b88      	ldr	r3, [pc, #544]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d02d      	beq.n	8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ac4:	4b85      	ldr	r3, [pc, #532]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	4a84      	ldr	r2, [pc, #528]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	ee07 3a90 	vmov	s15, r3
 8003adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aee:	4b7b      	ldr	r3, [pc, #492]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003b1e:	e087      	b.n	8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b32:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b62:	e065      	b.n	8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b76:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ba6:	e043      	b.n	8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bba:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bea:	e021      	b.n	8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003cec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfe:	4b37      	ldr	r3, [pc, #220]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003c30:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	0a5b      	lsrs	r3, r3, #9
 8003c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c56:	ee17 2a90 	vmov	r2, s15
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c68:	ee07 3a90 	vmov	s15, r3
 8003c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c84:	ee17 2a90 	vmov	r2, s15
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	0e1b      	lsrs	r3, r3, #24
 8003c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb2:	ee17 2a90 	vmov	r2, s15
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003cba:	e008      	b.n	8003cce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	03d09000 	.word	0x03d09000
 8003ce4:	46000000 	.word	0x46000000
 8003ce8:	4c742400 	.word	0x4c742400
 8003cec:	4a742400 	.word	0x4a742400
 8003cf0:	4af42400 	.word	0x4af42400

08003cf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cfc:	4ba1      	ldr	r3, [pc, #644]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003d06:	4b9f      	ldr	r3, [pc, #636]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	0d1b      	lsrs	r3, r3, #20
 8003d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d12:	4b9c      	ldr	r3, [pc, #624]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d1e:	4b99      	ldr	r3, [pc, #612]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8111 	beq.w	8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	f000 8083 	beq.w	8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	f200 80a1 	bhi.w	8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d056      	beq.n	8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d5e:	e099      	b.n	8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d60:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02d      	beq.n	8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d6c:	4b85      	ldr	r3, [pc, #532]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	08db      	lsrs	r3, r3, #3
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	4a84      	ldr	r2, [pc, #528]	; (8003f88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003daa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003dc6:	e087      	b.n	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dda:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e0a:	e065      	b.n	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1e:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e4e:	e043      	b.n	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003f98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e62:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e92:	e021      	b.n	8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003f94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea6:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003f8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ed6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	0a5b      	lsrs	r3, r3, #9
 8003ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efe:	ee17 2a90 	vmov	r2, s15
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003f06:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2c:	ee17 2a90 	vmov	r2, s15
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	0e1b      	lsrs	r3, r3, #24
 8003f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f5a:	ee17 2a90 	vmov	r2, s15
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f62:	e008      	b.n	8003f76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
}
 8003f76:	bf00      	nop
 8003f78:	3724      	adds	r7, #36	; 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
 8003f88:	03d09000 	.word	0x03d09000
 8003f8c:	46000000 	.word	0x46000000
 8003f90:	4c742400 	.word	0x4c742400
 8003f94:	4a742400 	.word	0x4a742400
 8003f98:	4af42400 	.word	0x4af42400

08003f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d101      	bne.n	8003fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e099      	b.n	80040ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fba:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc6:	f7fd fae3 	bl	8001590 <HAL_GetTick>
 8003fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003fce:	f7fd fadf 	bl	8001590 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e086      	b.n	80040ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fe0:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	493f      	ldr	r1, [pc, #252]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	3b01      	subs	r3, #1
 8004006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	025b      	lsls	r3, r3, #9
 8004012:	b29b      	uxth	r3, r3
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	3b01      	subs	r3, #1
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004030:	4931      	ldr	r1, [pc, #196]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	492d      	ldr	r1, [pc, #180]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f023 0220 	bic.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4928      	ldr	r1, [pc, #160]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004060:	f023 0310 	bic.w	r3, r3, #16
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <RCCEx_PLL2_Config+0x160>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	69d2      	ldr	r2, [r2, #28]
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	4920      	ldr	r1, [pc, #128]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004080:	f043 0310 	orr.w	r3, r3, #16
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004098:	e00f      	b.n	80040ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040ac:	e005      	b.n	80040ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c6:	f7fd fa63 	bl	8001590 <HAL_GetTick>
 80040ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040cc:	e008      	b.n	80040e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80040ce:	f7fd fa5f 	bl	8001590 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e006      	b.n	80040ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	58024400 	.word	0x58024400
 80040fc:	ffff0007 	.word	0xffff0007

08004100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800410e:	4b53      	ldr	r3, [pc, #332]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b03      	cmp	r3, #3
 8004118:	d101      	bne.n	800411e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e099      	b.n	8004252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4e      	ldr	r2, [pc, #312]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412a:	f7fd fa31 	bl	8001590 <HAL_GetTick>
 800412e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004130:	e008      	b.n	8004144 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004132:	f7fd fa2d 	bl	8001590 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e086      	b.n	8004252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004150:	4b42      	ldr	r3, [pc, #264]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	051b      	lsls	r3, r3, #20
 800415e:	493f      	ldr	r1, [pc, #252]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	628b      	str	r3, [r1, #40]	; 0x28
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	3b01      	subs	r3, #1
 800416a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	025b      	lsls	r3, r3, #9
 8004176:	b29b      	uxth	r3, r3
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	3b01      	subs	r3, #1
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004194:	4931      	ldr	r1, [pc, #196]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800419a:	4b30      	ldr	r3, [pc, #192]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	492d      	ldr	r1, [pc, #180]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4928      	ldr	r1, [pc, #160]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a26      	ldr	r2, [pc, #152]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <RCCEx_PLL3_Config+0x160>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	69d2      	ldr	r2, [r2, #28]
 80041d6:	00d2      	lsls	r2, r2, #3
 80041d8:	4920      	ldr	r1, [pc, #128]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4a19      	ldr	r2, [pc, #100]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041fc:	e00f      	b.n	800421e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 800420a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800420e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004210:	e005      	b.n	800421e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422a:	f7fd f9b1 	bl	8001590 <HAL_GetTick>
 800422e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004230:	e008      	b.n	8004244 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004232:	f7fd f9ad 	bl	8001590 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e006      	b.n	8004252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
 8004260:	ffff0007 	.word	0xffff0007

08004264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e049      	b.n	800430a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc feb4 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f000 fb6c 	bl	8004980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e049      	b.n	80043b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f841 	bl	80043c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f000 fb15 	bl	8004980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_TIM_PWM_Start+0x24>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e03c      	b.n	8004472 <HAL_TIM_PWM_Start+0x9e>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d109      	bne.n	8004412 <HAL_TIM_PWM_Start+0x3e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e02f      	b.n	8004472 <HAL_TIM_PWM_Start+0x9e>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d109      	bne.n	800442c <HAL_TIM_PWM_Start+0x58>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e022      	b.n	8004472 <HAL_TIM_PWM_Start+0x9e>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d109      	bne.n	8004446 <HAL_TIM_PWM_Start+0x72>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b01      	cmp	r3, #1
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	e015      	b.n	8004472 <HAL_TIM_PWM_Start+0x9e>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b10      	cmp	r3, #16
 800444a:	d109      	bne.n	8004460 <HAL_TIM_PWM_Start+0x8c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	e008      	b.n	8004472 <HAL_TIM_PWM_Start+0x9e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e06e      	b.n	8004558 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0xb6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004488:	e023      	b.n	80044d2 <HAL_TIM_PWM_Start+0xfe>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d104      	bne.n	800449a <HAL_TIM_PWM_Start+0xc6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004498:	e01b      	b.n	80044d2 <HAL_TIM_PWM_Start+0xfe>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d104      	bne.n	80044aa <HAL_TIM_PWM_Start+0xd6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a8:	e013      	b.n	80044d2 <HAL_TIM_PWM_Start+0xfe>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Start+0xe6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044b8:	e00b      	b.n	80044d2 <HAL_TIM_PWM_Start+0xfe>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0xf6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c8:	e003      	b.n	80044d2 <HAL_TIM_PWM_Start+0xfe>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	6839      	ldr	r1, [r7, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fe56 	bl	800518c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <HAL_TIM_PWM_Start+0x18c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_TIM_PWM_Start+0x13e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_TIM_PWM_Start+0x190>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_TIM_PWM_Start+0x13e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_TIM_PWM_Start+0x194>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_TIM_PWM_Start+0x13e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_TIM_PWM_Start+0x198>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_TIM_PWM_Start+0x13e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_TIM_PWM_Start+0x19c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_Start+0x142>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_TIM_PWM_Start+0x144>
 8004516:	2300      	movs	r3, #0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <HAL_TIM_PWM_Start+0x1a0>)
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b06      	cmp	r3, #6
 800453c:	d00b      	beq.n	8004556 <HAL_TIM_PWM_Start+0x182>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004544:	d007      	beq.n	8004556 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40010000 	.word	0x40010000
 8004564:	40010400 	.word	0x40010400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800
 8004574:	00010007 	.word	0x00010007

08004578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800458e:	2302      	movs	r3, #2
 8004590:	e0fd      	b.n	800478e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b14      	cmp	r3, #20
 800459e:	f200 80f0 	bhi.w	8004782 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	08004783 	.word	0x08004783
 80045b0:	08004783 	.word	0x08004783
 80045b4:	08004783 	.word	0x08004783
 80045b8:	0800463d 	.word	0x0800463d
 80045bc:	08004783 	.word	0x08004783
 80045c0:	08004783 	.word	0x08004783
 80045c4:	08004783 	.word	0x08004783
 80045c8:	0800467f 	.word	0x0800467f
 80045cc:	08004783 	.word	0x08004783
 80045d0:	08004783 	.word	0x08004783
 80045d4:	08004783 	.word	0x08004783
 80045d8:	080046bf 	.word	0x080046bf
 80045dc:	08004783 	.word	0x08004783
 80045e0:	08004783 	.word	0x08004783
 80045e4:	08004783 	.word	0x08004783
 80045e8:	08004701 	.word	0x08004701
 80045ec:	08004783 	.word	0x08004783
 80045f0:	08004783 	.word	0x08004783
 80045f4:	08004783 	.word	0x08004783
 80045f8:	08004741 	.word	0x08004741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fa56 	bl	8004ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0208 	orr.w	r2, r2, #8
 8004616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0204 	bic.w	r2, r2, #4
 8004626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	619a      	str	r2, [r3, #24]
      break;
 800463a:	e0a3      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fac6 	bl	8004bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	021a      	lsls	r2, r3, #8
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	619a      	str	r2, [r3, #24]
      break;
 800467c:	e082      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fb2f 	bl	8004ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0208 	orr.w	r2, r2, #8
 8004698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0204 	bic.w	r2, r2, #4
 80046a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	61da      	str	r2, [r3, #28]
      break;
 80046bc:	e062      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fb95 	bl	8004df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69d9      	ldr	r1, [r3, #28]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	021a      	lsls	r2, r3, #8
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	61da      	str	r2, [r3, #28]
      break;
 80046fe:	e041      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fbdc 	bl	8004ec4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0208 	orr.w	r2, r2, #8
 800471a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800473e:	e021      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fc1e 	bl	8004f88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004780:	e000      	b.n	8004784 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004782:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop

08004798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_ConfigClockSource+0x18>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e0db      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x1d0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4b69      	ldr	r3, [pc, #420]	; (8004970 <HAL_TIM_ConfigClockSource+0x1d8>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a63      	ldr	r2, [pc, #396]	; (8004974 <HAL_TIM_ConfigClockSource+0x1dc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	f000 80a9 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 80047ec:	4a61      	ldr	r2, [pc, #388]	; (8004974 <HAL_TIM_ConfigClockSource+0x1dc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	f200 80ae 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 80047f4:	4a60      	ldr	r2, [pc, #384]	; (8004978 <HAL_TIM_ConfigClockSource+0x1e0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	f000 80a1 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 80047fc:	4a5e      	ldr	r2, [pc, #376]	; (8004978 <HAL_TIM_ConfigClockSource+0x1e0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	f200 80a6 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004804:	4a5d      	ldr	r2, [pc, #372]	; (800497c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	f000 8099 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 800480c:	4a5b      	ldr	r2, [pc, #364]	; (800497c <HAL_TIM_ConfigClockSource+0x1e4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	f200 809e 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004814:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004818:	f000 8091 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 800481c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004820:	f200 8096 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004828:	f000 8089 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 800482c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004830:	f200 808e 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004838:	d03e      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0x120>
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483e:	f200 8087 	bhi.w	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	f000 8085 	beq.w	8004954 <HAL_TIM_ConfigClockSource+0x1bc>
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d87f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004850:	2b70      	cmp	r3, #112	; 0x70
 8004852:	d01a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0xf2>
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d87b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004858:	2b60      	cmp	r3, #96	; 0x60
 800485a:	d050      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x166>
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d877      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004860:	2b50      	cmp	r3, #80	; 0x50
 8004862:	d03c      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x146>
 8004864:	2b50      	cmp	r3, #80	; 0x50
 8004866:	d873      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d058      	beq.n	800491e <HAL_TIM_ConfigClockSource+0x186>
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d86f      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d064      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 8004874:	2b30      	cmp	r3, #48	; 0x30
 8004876:	d86b      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d060      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d867      	bhi.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05c      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1a6>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d05a      	beq.n	800493e <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004888:	e062      	b.n	8004950 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6899      	ldr	r1, [r3, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f000 fc57 	bl	800514c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	609a      	str	r2, [r3, #8]
      break;
 80048b6:	e04e      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f000 fc40 	bl	800514c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048da:	609a      	str	r2, [r3, #8]
      break;
 80048dc:	e03b      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 fbb0 	bl	8005050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2150      	movs	r1, #80	; 0x50
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fc0a 	bl	8005110 <TIM_ITRx_SetConfig>
      break;
 80048fc:	e02b      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6859      	ldr	r1, [r3, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	461a      	mov	r2, r3
 800490c:	f000 fbcf 	bl	80050ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2160      	movs	r1, #96	; 0x60
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fbfa 	bl	8005110 <TIM_ITRx_SetConfig>
      break;
 800491c:	e01b      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	461a      	mov	r2, r3
 800492c:	f000 fb90 	bl	8005050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2140      	movs	r1, #64	; 0x40
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fbea 	bl	8005110 <TIM_ITRx_SetConfig>
      break;
 800493c:	e00b      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 fbe1 	bl	8005110 <TIM_ITRx_SetConfig>
      break;
 800494e:	e002      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004954:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	ffceff88 	.word	0xffceff88
 8004974:	00100040 	.word	0x00100040
 8004978:	00100030 	.word	0x00100030
 800497c:	00100020 	.word	0x00100020

08004980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a40      	ldr	r2, [pc, #256]	; (8004a94 <TIM_Base_SetConfig+0x114>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d00f      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3d      	ldr	r2, [pc, #244]	; (8004a98 <TIM_Base_SetConfig+0x118>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3c      	ldr	r2, [pc, #240]	; (8004a9c <TIM_Base_SetConfig+0x11c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3b      	ldr	r2, [pc, #236]	; (8004aa0 <TIM_Base_SetConfig+0x120>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3a      	ldr	r2, [pc, #232]	; (8004aa4 <TIM_Base_SetConfig+0x124>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d108      	bne.n	80049d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2f      	ldr	r2, [pc, #188]	; (8004a94 <TIM_Base_SetConfig+0x114>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01f      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e0:	d01b      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2c      	ldr	r2, [pc, #176]	; (8004a98 <TIM_Base_SetConfig+0x118>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d017      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2b      	ldr	r2, [pc, #172]	; (8004a9c <TIM_Base_SetConfig+0x11c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2a      	ldr	r2, [pc, #168]	; (8004aa0 <TIM_Base_SetConfig+0x120>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <TIM_Base_SetConfig+0x124>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a28      	ldr	r2, [pc, #160]	; (8004aa8 <TIM_Base_SetConfig+0x128>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <TIM_Base_SetConfig+0x12c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_Base_SetConfig+0x9a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <TIM_Base_SetConfig+0x130>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d108      	bne.n	8004a2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a10      	ldr	r2, [pc, #64]	; (8004a94 <TIM_Base_SetConfig+0x114>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00f      	beq.n	8004a78 <TIM_Base_SetConfig+0xf8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <TIM_Base_SetConfig+0x124>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <TIM_Base_SetConfig+0x128>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_Base_SetConfig+0xf8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <TIM_Base_SetConfig+0x12c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_Base_SetConfig+0xf8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <TIM_Base_SetConfig+0x130>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d103      	bne.n	8004a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	615a      	str	r2, [r3, #20]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800

08004ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <TIM_OC1_SetConfig+0x108>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 0302 	bic.w	r3, r3, #2
 8004afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a2d      	ldr	r2, [pc, #180]	; (8004bc0 <TIM_OC1_SetConfig+0x10c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00f      	beq.n	8004b30 <TIM_OC1_SetConfig+0x7c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <TIM_OC1_SetConfig+0x110>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_OC1_SetConfig+0x7c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <TIM_OC1_SetConfig+0x114>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <TIM_OC1_SetConfig+0x7c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2a      	ldr	r2, [pc, #168]	; (8004bcc <TIM_OC1_SetConfig+0x118>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_OC1_SetConfig+0x7c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <TIM_OC1_SetConfig+0x11c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10c      	bne.n	8004b4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0308 	bic.w	r3, r3, #8
 8004b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1c      	ldr	r2, [pc, #112]	; (8004bc0 <TIM_OC1_SetConfig+0x10c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00f      	beq.n	8004b72 <TIM_OC1_SetConfig+0xbe>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1b      	ldr	r2, [pc, #108]	; (8004bc4 <TIM_OC1_SetConfig+0x110>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <TIM_OC1_SetConfig+0xbe>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <TIM_OC1_SetConfig+0x114>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <TIM_OC1_SetConfig+0xbe>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <TIM_OC1_SetConfig+0x118>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_OC1_SetConfig+0xbe>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <TIM_OC1_SetConfig+0x11c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d111      	bne.n	8004b96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	fffeff8f 	.word	0xfffeff8f
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40010400 	.word	0x40010400
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40014400 	.word	0x40014400
 8004bd0:	40014800 	.word	0x40014800

08004bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f023 0210 	bic.w	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4b34      	ldr	r3, [pc, #208]	; (8004cd0 <TIM_OC2_SetConfig+0xfc>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0320 	bic.w	r3, r3, #32
 8004c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a29      	ldr	r2, [pc, #164]	; (8004cd4 <TIM_OC2_SetConfig+0x100>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC2_SetConfig+0x68>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <TIM_OC2_SetConfig+0x104>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10d      	bne.n	8004c58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <TIM_OC2_SetConfig+0x100>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00f      	beq.n	8004c80 <TIM_OC2_SetConfig+0xac>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <TIM_OC2_SetConfig+0x104>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00b      	beq.n	8004c80 <TIM_OC2_SetConfig+0xac>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <TIM_OC2_SetConfig+0x108>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_OC2_SetConfig+0xac>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <TIM_OC2_SetConfig+0x10c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_OC2_SetConfig+0xac>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <TIM_OC2_SetConfig+0x110>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d113      	bne.n	8004ca8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	feff8fff 	.word	0xfeff8fff
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800

08004ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <TIM_OC3_SetConfig+0xf8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC3_SetConfig+0x66>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <TIM_OC3_SetConfig+0xfc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10d      	bne.n	8004d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <TIM_OC3_SetConfig+0xf8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00f      	beq.n	8004d92 <TIM_OC3_SetConfig+0xaa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <TIM_OC3_SetConfig+0xfc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <TIM_OC3_SetConfig+0xaa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1a      	ldr	r2, [pc, #104]	; (8004de8 <TIM_OC3_SetConfig+0x100>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <TIM_OC3_SetConfig+0xaa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <TIM_OC3_SetConfig+0x104>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_OC3_SetConfig+0xaa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <TIM_OC3_SetConfig+0x108>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d113      	bne.n	8004dba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800

08004df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	031b      	lsls	r3, r3, #12
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <TIM_OC4_SetConfig+0xbc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00f      	beq.n	8004e74 <TIM_OC4_SetConfig+0x80>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a17      	ldr	r2, [pc, #92]	; (8004eb4 <TIM_OC4_SetConfig+0xc0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <TIM_OC4_SetConfig+0x80>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <TIM_OC4_SetConfig+0xc4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <TIM_OC4_SetConfig+0x80>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <TIM_OC4_SetConfig+0xc8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC4_SetConfig+0x80>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <TIM_OC4_SetConfig+0xcc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d109      	bne.n	8004e88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a17      	ldr	r2, [pc, #92]	; (8004f74 <TIM_OC5_SetConfig+0xb0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <TIM_OC5_SetConfig+0x76>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <TIM_OC5_SetConfig+0xb4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_OC5_SetConfig+0x76>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <TIM_OC5_SetConfig+0xb8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <TIM_OC5_SetConfig+0x76>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <TIM_OC5_SetConfig+0xbc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_OC5_SetConfig+0x76>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <TIM_OC5_SetConfig+0xc0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d109      	bne.n	8004f4e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40010400 	.word	0x40010400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800

08004f88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	051b      	lsls	r3, r3, #20
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a18      	ldr	r2, [pc, #96]	; (800503c <TIM_OC6_SetConfig+0xb4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00f      	beq.n	8005000 <TIM_OC6_SetConfig+0x78>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	; (8005040 <TIM_OC6_SetConfig+0xb8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_OC6_SetConfig+0x78>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a16      	ldr	r2, [pc, #88]	; (8005044 <TIM_OC6_SetConfig+0xbc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_OC6_SetConfig+0x78>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <TIM_OC6_SetConfig+0xc0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_OC6_SetConfig+0x78>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a14      	ldr	r2, [pc, #80]	; (800504c <TIM_OC6_SetConfig+0xc4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d109      	bne.n	8005014 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40010400 	.word	0x40010400
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800

08005050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 030a 	bic.w	r3, r3, #10
 800508c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b087      	sub	sp, #28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <TIM_ITRx_SetConfig+0x38>)
 8005124:	4013      	ands	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	f043 0307 	orr.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	609a      	str	r2, [r3, #8]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	ffcfff8f 	.word	0xffcfff8f

0800514c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	431a      	orrs	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	2201      	movs	r2, #1
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	401a      	ands	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e068      	b.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2e      	ldr	r2, [pc, #184]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d108      	bne.n	8005236 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800522a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01d      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d018      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10c      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800529c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40001800 	.word	0x40001800

080052e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005300:	2302      	movs	r3, #2
 8005302:	e065      	b.n	80053d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a16      	ldr	r2, [pc, #88]	; (80053dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d115      	bne.n	80053be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	051b      	lsls	r3, r3, #20
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400

080053e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e042      	b.n	800547c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fb fe95 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2224      	movs	r2, #36	; 0x24
 8005412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f90e 	bl	8005648 <UART_SetConfig>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e022      	b.n	800547c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fe68 	bl	8006114 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 feef 	bl	8006258 <UART_CheckIdleState>
 800547a:	4603      	mov	r3, r0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	4613      	mov	r3, r2
 8005490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005498:	2b20      	cmp	r3, #32
 800549a:	f040 80bc 	bne.w	8005616 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_UART_Receive_IT+0x26>
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e0b4      	b.n	8005618 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Receive_IT+0x38>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0ad      	b.n	8005618 <HAL_UART_Receive_IT+0x194>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	88fa      	ldrh	r2, [r7, #6]
 80054d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d10e      	bne.n	8005508 <HAL_UART_Receive_IT+0x84>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d105      	bne.n	80054fe <HAL_UART_Receive_IT+0x7a>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054fc:	e02d      	b.n	800555a <HAL_UART_Receive_IT+0xd6>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	22ff      	movs	r2, #255	; 0xff
 8005502:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005506:	e028      	b.n	800555a <HAL_UART_Receive_IT+0xd6>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10d      	bne.n	800552c <HAL_UART_Receive_IT+0xa8>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <HAL_UART_Receive_IT+0x9e>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	22ff      	movs	r2, #255	; 0xff
 800551c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005520:	e01b      	b.n	800555a <HAL_UART_Receive_IT+0xd6>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	227f      	movs	r2, #127	; 0x7f
 8005526:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800552a:	e016      	b.n	800555a <HAL_UART_Receive_IT+0xd6>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005534:	d10d      	bne.n	8005552 <HAL_UART_Receive_IT+0xce>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <HAL_UART_Receive_IT+0xc4>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	227f      	movs	r2, #127	; 0x7f
 8005542:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005546:	e008      	b.n	800555a <HAL_UART_Receive_IT+0xd6>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	223f      	movs	r2, #63	; 0x3f
 800554c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005550:	e003      	b.n	800555a <HAL_UART_Receive_IT+0xd6>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2222      	movs	r2, #34	; 0x22
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005582:	d12a      	bne.n	80055da <HAL_UART_Receive_IT+0x156>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	429a      	cmp	r2, r3
 800558e:	d324      	bcc.n	80055da <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d107      	bne.n	80055aa <HAL_UART_Receive_IT+0x126>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <HAL_UART_Receive_IT+0x1a0>)
 80055a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80055a8:	e002      	b.n	80055b0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <HAL_UART_Receive_IT+0x1a4>)
 80055ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055d6:	609a      	str	r2, [r3, #8]
 80055d8:	e01b      	b.n	8005612 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e2:	d107      	bne.n	80055f4 <HAL_UART_Receive_IT+0x170>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4a0f      	ldr	r2, [pc, #60]	; (800562c <HAL_UART_Receive_IT+0x1a8>)
 80055f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80055f2:	e002      	b.n	80055fa <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a0e      	ldr	r2, [pc, #56]	; (8005630 <HAL_UART_Receive_IT+0x1ac>)
 80055f8:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005610:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e000      	b.n	8005618 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	08006645 	.word	0x08006645
 8005628:	0800653d 	.word	0x0800653d
 800562c:	08006493 	.word	0x08006493
 8005630:	080063e9 	.word	0x080063e9

08005634 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005648:	b5b0      	push	{r4, r5, r7, lr}
 800564a:	b08e      	sub	sp, #56	; 0x38
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	4313      	orrs	r3, r2
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005674:	4313      	orrs	r3, r2
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4bc0      	ldr	r3, [pc, #768]	; (8005980 <UART_SetConfig+0x338>)
 8005680:	4013      	ands	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005688:	430b      	orrs	r3, r1
 800568a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4ab5      	ldr	r2, [pc, #724]	; (8005984 <UART_SetConfig+0x33c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b8:	4313      	orrs	r3, r2
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	4bb1      	ldr	r3, [pc, #708]	; (8005988 <UART_SetConfig+0x340>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	f023 010f 	bic.w	r1, r3, #15
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4aa8      	ldr	r2, [pc, #672]	; (800598c <UART_SetConfig+0x344>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d177      	bne.n	80057e0 <UART_SetConfig+0x198>
 80056f0:	4ba7      	ldr	r3, [pc, #668]	; (8005990 <UART_SetConfig+0x348>)
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056f8:	2b28      	cmp	r3, #40	; 0x28
 80056fa:	d86d      	bhi.n	80057d8 <UART_SetConfig+0x190>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0xbc>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	080057a9 	.word	0x080057a9
 8005708:	080057d9 	.word	0x080057d9
 800570c:	080057d9 	.word	0x080057d9
 8005710:	080057d9 	.word	0x080057d9
 8005714:	080057d9 	.word	0x080057d9
 8005718:	080057d9 	.word	0x080057d9
 800571c:	080057d9 	.word	0x080057d9
 8005720:	080057d9 	.word	0x080057d9
 8005724:	080057b1 	.word	0x080057b1
 8005728:	080057d9 	.word	0x080057d9
 800572c:	080057d9 	.word	0x080057d9
 8005730:	080057d9 	.word	0x080057d9
 8005734:	080057d9 	.word	0x080057d9
 8005738:	080057d9 	.word	0x080057d9
 800573c:	080057d9 	.word	0x080057d9
 8005740:	080057d9 	.word	0x080057d9
 8005744:	080057b9 	.word	0x080057b9
 8005748:	080057d9 	.word	0x080057d9
 800574c:	080057d9 	.word	0x080057d9
 8005750:	080057d9 	.word	0x080057d9
 8005754:	080057d9 	.word	0x080057d9
 8005758:	080057d9 	.word	0x080057d9
 800575c:	080057d9 	.word	0x080057d9
 8005760:	080057d9 	.word	0x080057d9
 8005764:	080057c1 	.word	0x080057c1
 8005768:	080057d9 	.word	0x080057d9
 800576c:	080057d9 	.word	0x080057d9
 8005770:	080057d9 	.word	0x080057d9
 8005774:	080057d9 	.word	0x080057d9
 8005778:	080057d9 	.word	0x080057d9
 800577c:	080057d9 	.word	0x080057d9
 8005780:	080057d9 	.word	0x080057d9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057d9 	.word	0x080057d9
 800578c:	080057d9 	.word	0x080057d9
 8005790:	080057d9 	.word	0x080057d9
 8005794:	080057d9 	.word	0x080057d9
 8005798:	080057d9 	.word	0x080057d9
 800579c:	080057d9 	.word	0x080057d9
 80057a0:	080057d9 	.word	0x080057d9
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ae:	e222      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b6:	e21e      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057be:	e21a      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c6:	e216      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80057c8:	2320      	movs	r3, #32
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e212      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80057d0:	2340      	movs	r3, #64	; 0x40
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e20e      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	e20a      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a6b      	ldr	r2, [pc, #428]	; (8005994 <UART_SetConfig+0x34c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d130      	bne.n	800584c <UART_SetConfig+0x204>
 80057ea:	4b69      	ldr	r3, [pc, #420]	; (8005990 <UART_SetConfig+0x348>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d826      	bhi.n	8005844 <UART_SetConfig+0x1fc>
 80057f6:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0x1b4>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	08005815 	.word	0x08005815
 8005800:	0800581d 	.word	0x0800581d
 8005804:	08005825 	.word	0x08005825
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005835 	.word	0x08005835
 8005810:	0800583d 	.word	0x0800583d
 8005814:	2300      	movs	r3, #0
 8005816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581a:	e1ec      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 800581c:	2304      	movs	r3, #4
 800581e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005822:	e1e8      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005824:	2308      	movs	r3, #8
 8005826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582a:	e1e4      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 800582c:	2310      	movs	r3, #16
 800582e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005832:	e1e0      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005834:	2320      	movs	r3, #32
 8005836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583a:	e1dc      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005842:	e1d8      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584a:	e1d4      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a51      	ldr	r2, [pc, #324]	; (8005998 <UART_SetConfig+0x350>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d130      	bne.n	80058b8 <UART_SetConfig+0x270>
 8005856:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <UART_SetConfig+0x348>)
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	2b05      	cmp	r3, #5
 8005860:	d826      	bhi.n	80058b0 <UART_SetConfig+0x268>
 8005862:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <UART_SetConfig+0x220>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	08005881 	.word	0x08005881
 800586c:	08005889 	.word	0x08005889
 8005870:	08005891 	.word	0x08005891
 8005874:	08005899 	.word	0x08005899
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058a9 	.word	0x080058a9
 8005880:	2300      	movs	r3, #0
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e1b6      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005888:	2304      	movs	r3, #4
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e1b2      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005890:	2308      	movs	r3, #8
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005896:	e1ae      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005898:	2310      	movs	r3, #16
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589e:	e1aa      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80058a0:	2320      	movs	r3, #32
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e1a6      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80058a8:	2340      	movs	r3, #64	; 0x40
 80058aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ae:	e1a2      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b6:	e19e      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a37      	ldr	r2, [pc, #220]	; (800599c <UART_SetConfig+0x354>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d130      	bne.n	8005924 <UART_SetConfig+0x2dc>
 80058c2:	4b33      	ldr	r3, [pc, #204]	; (8005990 <UART_SetConfig+0x348>)
 80058c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	d826      	bhi.n	800591c <UART_SetConfig+0x2d4>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <UART_SetConfig+0x28c>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	080058ed 	.word	0x080058ed
 80058d8:	080058f5 	.word	0x080058f5
 80058dc:	080058fd 	.word	0x080058fd
 80058e0:	08005905 	.word	0x08005905
 80058e4:	0800590d 	.word	0x0800590d
 80058e8:	08005915 	.word	0x08005915
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e180      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80058f4:	2304      	movs	r3, #4
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e17c      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80058fc:	2308      	movs	r3, #8
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	e178      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005904:	2310      	movs	r3, #16
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590a:	e174      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 800590c:	2320      	movs	r3, #32
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e170      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591a:	e16c      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005922:	e168      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <UART_SetConfig+0x358>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d142      	bne.n	80059b4 <UART_SetConfig+0x36c>
 800592e:	4b18      	ldr	r3, [pc, #96]	; (8005990 <UART_SetConfig+0x348>)
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	2b05      	cmp	r3, #5
 8005938:	d838      	bhi.n	80059ac <UART_SetConfig+0x364>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <UART_SetConfig+0x2f8>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005959 	.word	0x08005959
 8005944:	08005961 	.word	0x08005961
 8005948:	08005969 	.word	0x08005969
 800594c:	08005971 	.word	0x08005971
 8005950:	08005979 	.word	0x08005979
 8005954:	080059a5 	.word	0x080059a5
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e14a      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	e146      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596e:	e142      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005976:	e13e      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005978:	2320      	movs	r3, #32
 800597a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597e:	e13a      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005980:	cfff69f3 	.word	0xcfff69f3
 8005984:	58000c00 	.word	0x58000c00
 8005988:	11fff4ff 	.word	0x11fff4ff
 800598c:	40011000 	.word	0x40011000
 8005990:	58024400 	.word	0x58024400
 8005994:	40004400 	.word	0x40004400
 8005998:	40004800 	.word	0x40004800
 800599c:	40004c00 	.word	0x40004c00
 80059a0:	40005000 	.word	0x40005000
 80059a4:	2340      	movs	r3, #64	; 0x40
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e124      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e120      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4acc      	ldr	r2, [pc, #816]	; (8005cec <UART_SetConfig+0x6a4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d176      	bne.n	8005aac <UART_SetConfig+0x464>
 80059be:	4bcc      	ldr	r3, [pc, #816]	; (8005cf0 <UART_SetConfig+0x6a8>)
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c6:	2b28      	cmp	r3, #40	; 0x28
 80059c8:	d86c      	bhi.n	8005aa4 <UART_SetConfig+0x45c>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0x388>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	08005a75 	.word	0x08005a75
 80059d4:	08005aa5 	.word	0x08005aa5
 80059d8:	08005aa5 	.word	0x08005aa5
 80059dc:	08005aa5 	.word	0x08005aa5
 80059e0:	08005aa5 	.word	0x08005aa5
 80059e4:	08005aa5 	.word	0x08005aa5
 80059e8:	08005aa5 	.word	0x08005aa5
 80059ec:	08005aa5 	.word	0x08005aa5
 80059f0:	08005a7d 	.word	0x08005a7d
 80059f4:	08005aa5 	.word	0x08005aa5
 80059f8:	08005aa5 	.word	0x08005aa5
 80059fc:	08005aa5 	.word	0x08005aa5
 8005a00:	08005aa5 	.word	0x08005aa5
 8005a04:	08005aa5 	.word	0x08005aa5
 8005a08:	08005aa5 	.word	0x08005aa5
 8005a0c:	08005aa5 	.word	0x08005aa5
 8005a10:	08005a85 	.word	0x08005a85
 8005a14:	08005aa5 	.word	0x08005aa5
 8005a18:	08005aa5 	.word	0x08005aa5
 8005a1c:	08005aa5 	.word	0x08005aa5
 8005a20:	08005aa5 	.word	0x08005aa5
 8005a24:	08005aa5 	.word	0x08005aa5
 8005a28:	08005aa5 	.word	0x08005aa5
 8005a2c:	08005aa5 	.word	0x08005aa5
 8005a30:	08005a8d 	.word	0x08005a8d
 8005a34:	08005aa5 	.word	0x08005aa5
 8005a38:	08005aa5 	.word	0x08005aa5
 8005a3c:	08005aa5 	.word	0x08005aa5
 8005a40:	08005aa5 	.word	0x08005aa5
 8005a44:	08005aa5 	.word	0x08005aa5
 8005a48:	08005aa5 	.word	0x08005aa5
 8005a4c:	08005aa5 	.word	0x08005aa5
 8005a50:	08005a95 	.word	0x08005a95
 8005a54:	08005aa5 	.word	0x08005aa5
 8005a58:	08005aa5 	.word	0x08005aa5
 8005a5c:	08005aa5 	.word	0x08005aa5
 8005a60:	08005aa5 	.word	0x08005aa5
 8005a64:	08005aa5 	.word	0x08005aa5
 8005a68:	08005aa5 	.word	0x08005aa5
 8005a6c:	08005aa5 	.word	0x08005aa5
 8005a70:	08005a9d 	.word	0x08005a9d
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e0bc      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a82:	e0b8      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005a84:	2308      	movs	r3, #8
 8005a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8a:	e0b4      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a92:	e0b0      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005a94:	2320      	movs	r3, #32
 8005a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9a:	e0ac      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005a9c:	2340      	movs	r3, #64	; 0x40
 8005a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa2:	e0a8      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005aa4:	2380      	movs	r3, #128	; 0x80
 8005aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aaa:	e0a4      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a90      	ldr	r2, [pc, #576]	; (8005cf4 <UART_SetConfig+0x6ac>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d130      	bne.n	8005b18 <UART_SetConfig+0x4d0>
 8005ab6:	4b8e      	ldr	r3, [pc, #568]	; (8005cf0 <UART_SetConfig+0x6a8>)
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d826      	bhi.n	8005b10 <UART_SetConfig+0x4c8>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x480>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005ae1 	.word	0x08005ae1
 8005acc:	08005ae9 	.word	0x08005ae9
 8005ad0:	08005af1 	.word	0x08005af1
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b01 	.word	0x08005b01
 8005adc:	08005b09 	.word	0x08005b09
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	e086      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aee:	e082      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005af0:	2308      	movs	r3, #8
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	e07e      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005af8:	2310      	movs	r3, #16
 8005afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afe:	e07a      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b00:	2320      	movs	r3, #32
 8005b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b06:	e076      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b08:	2340      	movs	r3, #64	; 0x40
 8005b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0e:	e072      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b16:	e06e      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a76      	ldr	r2, [pc, #472]	; (8005cf8 <UART_SetConfig+0x6b0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d130      	bne.n	8005b84 <UART_SetConfig+0x53c>
 8005b22:	4b73      	ldr	r3, [pc, #460]	; (8005cf0 <UART_SetConfig+0x6a8>)
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d826      	bhi.n	8005b7c <UART_SetConfig+0x534>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0x4ec>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b4d 	.word	0x08005b4d
 8005b38:	08005b55 	.word	0x08005b55
 8005b3c:	08005b5d 	.word	0x08005b5d
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e050      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b54:	2304      	movs	r3, #4
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e04c      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b5c:	2308      	movs	r3, #8
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e048      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b64:	2310      	movs	r3, #16
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6a:	e044      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e040      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7a:	e03c      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b82:	e038      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a5c      	ldr	r2, [pc, #368]	; (8005cfc <UART_SetConfig+0x6b4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d130      	bne.n	8005bf0 <UART_SetConfig+0x5a8>
 8005b8e:	4b58      	ldr	r3, [pc, #352]	; (8005cf0 <UART_SetConfig+0x6a8>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	2b05      	cmp	r3, #5
 8005b98:	d826      	bhi.n	8005be8 <UART_SetConfig+0x5a0>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x558>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bb9 	.word	0x08005bb9
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bc9 	.word	0x08005bc9
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e01a      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e016      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e012      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e00e      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e00a      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e006      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bee:	e002      	b.n	8005bf6 <UART_SetConfig+0x5ae>
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a40      	ldr	r2, [pc, #256]	; (8005cfc <UART_SetConfig+0x6b4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	f040 80ef 	bne.w	8005de0 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	dc46      	bgt.n	8005c98 <UART_SetConfig+0x650>
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	f2c0 8081 	blt.w	8005d12 <UART_SetConfig+0x6ca>
 8005c10:	3b02      	subs	r3, #2
 8005c12:	2b1e      	cmp	r3, #30
 8005c14:	d87d      	bhi.n	8005d12 <UART_SetConfig+0x6ca>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x5d4>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c9f 	.word	0x08005c9f
 8005c20:	08005d13 	.word	0x08005d13
 8005c24:	08005ca7 	.word	0x08005ca7
 8005c28:	08005d13 	.word	0x08005d13
 8005c2c:	08005d13 	.word	0x08005d13
 8005c30:	08005d13 	.word	0x08005d13
 8005c34:	08005cb7 	.word	0x08005cb7
 8005c38:	08005d13 	.word	0x08005d13
 8005c3c:	08005d13 	.word	0x08005d13
 8005c40:	08005d13 	.word	0x08005d13
 8005c44:	08005d13 	.word	0x08005d13
 8005c48:	08005d13 	.word	0x08005d13
 8005c4c:	08005d13 	.word	0x08005d13
 8005c50:	08005d13 	.word	0x08005d13
 8005c54:	08005cc7 	.word	0x08005cc7
 8005c58:	08005d13 	.word	0x08005d13
 8005c5c:	08005d13 	.word	0x08005d13
 8005c60:	08005d13 	.word	0x08005d13
 8005c64:	08005d13 	.word	0x08005d13
 8005c68:	08005d13 	.word	0x08005d13
 8005c6c:	08005d13 	.word	0x08005d13
 8005c70:	08005d13 	.word	0x08005d13
 8005c74:	08005d13 	.word	0x08005d13
 8005c78:	08005d13 	.word	0x08005d13
 8005c7c:	08005d13 	.word	0x08005d13
 8005c80:	08005d13 	.word	0x08005d13
 8005c84:	08005d13 	.word	0x08005d13
 8005c88:	08005d13 	.word	0x08005d13
 8005c8c:	08005d13 	.word	0x08005d13
 8005c90:	08005d13 	.word	0x08005d13
 8005c94:	08005d05 	.word	0x08005d05
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d036      	beq.n	8005d0a <UART_SetConfig+0x6c2>
 8005c9c:	e039      	b.n	8005d12 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c9e:	f7fd febf 	bl	8003a20 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ca2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ca4:	e03b      	b.n	8005d1e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ca6:	f107 0314 	add.w	r3, r7, #20
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fd fece 	bl	8003a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb4:	e033      	b.n	8005d1e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe f81a 	bl	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cc4:	e02b      	b.n	8005d1e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <UART_SetConfig+0x6a8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <UART_SetConfig+0x6a8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	08db      	lsrs	r3, r3, #3
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <UART_SetConfig+0x6b8>)
 8005cde:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ce4:	e01b      	b.n	8005d1e <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <UART_SetConfig+0x6b8>)
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cea:	e018      	b.n	8005d1e <UART_SetConfig+0x6d6>
 8005cec:	40011400 	.word	0x40011400
 8005cf0:	58024400 	.word	0x58024400
 8005cf4:	40007800 	.word	0x40007800
 8005cf8:	40007c00 	.word	0x40007c00
 8005cfc:	58000c00 	.word	0x58000c00
 8005d00:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d04:	4bc4      	ldr	r3, [pc, #784]	; (8006018 <UART_SetConfig+0x9d0>)
 8005d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d08:	e009      	b.n	8005d1e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d10:	e005      	b.n	8005d1e <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 81da 	beq.w	80060da <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	4abc      	ldr	r2, [pc, #752]	; (800601c <UART_SetConfig+0x9d4>)
 8005d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d38:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d305      	bcc.n	8005d56 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d903      	bls.n	8005d5e <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d5c:	e1bd      	b.n	80060da <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	4618      	mov	r0, r3
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	4aac      	ldr	r2, [pc, #688]	; (800601c <UART_SetConfig+0x9d4>)
 8005d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	f7fa faaf 	bl	80002d8 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	020b      	lsls	r3, r1, #8
 8005d8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d90:	0202      	lsls	r2, r0, #8
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	6849      	ldr	r1, [r1, #4]
 8005d96:	0849      	lsrs	r1, r1, #1
 8005d98:	4608      	mov	r0, r1
 8005d9a:	f04f 0100 	mov.w	r1, #0
 8005d9e:	1814      	adds	r4, r2, r0
 8005da0:	eb43 0501 	adc.w	r5, r3, r1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	461a      	mov	r2, r3
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fa91 	bl	80002d8 <__aeabi_uldivmod>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4613      	mov	r3, r2
 8005dbc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc4:	d308      	bcc.n	8005dd8 <UART_SetConfig+0x790>
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dcc:	d204      	bcs.n	8005dd8 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd4:	60da      	str	r2, [r3, #12]
 8005dd6:	e180      	b.n	80060da <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005dde:	e17c      	b.n	80060da <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de8:	f040 80bf 	bne.w	8005f6a <UART_SetConfig+0x922>
  {
    switch (clocksource)
 8005dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	dc49      	bgt.n	8005e88 <UART_SetConfig+0x840>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	db7c      	blt.n	8005ef2 <UART_SetConfig+0x8aa>
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d87a      	bhi.n	8005ef2 <UART_SetConfig+0x8aa>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x7bc>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e8f 	.word	0x08005e8f
 8005e08:	08005e97 	.word	0x08005e97
 8005e0c:	08005ef3 	.word	0x08005ef3
 8005e10:	08005ef3 	.word	0x08005ef3
 8005e14:	08005e9f 	.word	0x08005e9f
 8005e18:	08005ef3 	.word	0x08005ef3
 8005e1c:	08005ef3 	.word	0x08005ef3
 8005e20:	08005ef3 	.word	0x08005ef3
 8005e24:	08005eaf 	.word	0x08005eaf
 8005e28:	08005ef3 	.word	0x08005ef3
 8005e2c:	08005ef3 	.word	0x08005ef3
 8005e30:	08005ef3 	.word	0x08005ef3
 8005e34:	08005ef3 	.word	0x08005ef3
 8005e38:	08005ef3 	.word	0x08005ef3
 8005e3c:	08005ef3 	.word	0x08005ef3
 8005e40:	08005ef3 	.word	0x08005ef3
 8005e44:	08005ebf 	.word	0x08005ebf
 8005e48:	08005ef3 	.word	0x08005ef3
 8005e4c:	08005ef3 	.word	0x08005ef3
 8005e50:	08005ef3 	.word	0x08005ef3
 8005e54:	08005ef3 	.word	0x08005ef3
 8005e58:	08005ef3 	.word	0x08005ef3
 8005e5c:	08005ef3 	.word	0x08005ef3
 8005e60:	08005ef3 	.word	0x08005ef3
 8005e64:	08005ef3 	.word	0x08005ef3
 8005e68:	08005ef3 	.word	0x08005ef3
 8005e6c:	08005ef3 	.word	0x08005ef3
 8005e70:	08005ef3 	.word	0x08005ef3
 8005e74:	08005ef3 	.word	0x08005ef3
 8005e78:	08005ef3 	.word	0x08005ef3
 8005e7c:	08005ef3 	.word	0x08005ef3
 8005e80:	08005ef3 	.word	0x08005ef3
 8005e84:	08005ee5 	.word	0x08005ee5
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d02e      	beq.n	8005eea <UART_SetConfig+0x8a2>
 8005e8c:	e031      	b.n	8005ef2 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e8e:	f7fc fe4f 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8005e92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e94:	e033      	b.n	8005efe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e96:	f7fc fe61 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8005e9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e9c:	e02f      	b.n	8005efe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd fdd2 	bl	8003a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eac:	e027      	b.n	8005efe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fd ff1e 	bl	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ebc:	e01f      	b.n	8005efe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebe:	4b58      	ldr	r3, [pc, #352]	; (8006020 <UART_SetConfig+0x9d8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eca:	4b55      	ldr	r3, [pc, #340]	; (8006020 <UART_SetConfig+0x9d8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	08db      	lsrs	r3, r3, #3
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	4a53      	ldr	r2, [pc, #332]	; (8006024 <UART_SetConfig+0x9dc>)
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005edc:	e00f      	b.n	8005efe <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8005ede:	4b51      	ldr	r3, [pc, #324]	; (8006024 <UART_SetConfig+0x9dc>)
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ee2:	e00c      	b.n	8005efe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ee4:	4b4c      	ldr	r3, [pc, #304]	; (8006018 <UART_SetConfig+0x9d0>)
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ee8:	e009      	b.n	8005efe <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ef0:	e005      	b.n	8005efe <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005efc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80ea 	beq.w	80060da <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	4a44      	ldr	r2, [pc, #272]	; (800601c <UART_SetConfig+0x9d4>)
 8005f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f10:	461a      	mov	r2, r3
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f18:	005a      	lsls	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	2b0f      	cmp	r3, #15
 8005f32:	d916      	bls.n	8005f62 <UART_SetConfig+0x91a>
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3a:	d212      	bcs.n	8005f62 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f023 030f 	bic.w	r3, r3, #15
 8005f44:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f54:	4313      	orrs	r3, r2
 8005f56:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	e0bb      	b.n	80060da <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f68:	e0b7      	b.n	80060da <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	dc4a      	bgt.n	8006008 <UART_SetConfig+0x9c0>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f2c0 8086 	blt.w	8006084 <UART_SetConfig+0xa3c>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	f200 8083 	bhi.w	8006084 <UART_SetConfig+0xa3c>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <UART_SetConfig+0x93c>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	0800600f 	.word	0x0800600f
 8005f88:	08006029 	.word	0x08006029
 8005f8c:	08006085 	.word	0x08006085
 8005f90:	08006085 	.word	0x08006085
 8005f94:	08006031 	.word	0x08006031
 8005f98:	08006085 	.word	0x08006085
 8005f9c:	08006085 	.word	0x08006085
 8005fa0:	08006085 	.word	0x08006085
 8005fa4:	08006041 	.word	0x08006041
 8005fa8:	08006085 	.word	0x08006085
 8005fac:	08006085 	.word	0x08006085
 8005fb0:	08006085 	.word	0x08006085
 8005fb4:	08006085 	.word	0x08006085
 8005fb8:	08006085 	.word	0x08006085
 8005fbc:	08006085 	.word	0x08006085
 8005fc0:	08006085 	.word	0x08006085
 8005fc4:	08006051 	.word	0x08006051
 8005fc8:	08006085 	.word	0x08006085
 8005fcc:	08006085 	.word	0x08006085
 8005fd0:	08006085 	.word	0x08006085
 8005fd4:	08006085 	.word	0x08006085
 8005fd8:	08006085 	.word	0x08006085
 8005fdc:	08006085 	.word	0x08006085
 8005fe0:	08006085 	.word	0x08006085
 8005fe4:	08006085 	.word	0x08006085
 8005fe8:	08006085 	.word	0x08006085
 8005fec:	08006085 	.word	0x08006085
 8005ff0:	08006085 	.word	0x08006085
 8005ff4:	08006085 	.word	0x08006085
 8005ff8:	08006085 	.word	0x08006085
 8005ffc:	08006085 	.word	0x08006085
 8006000:	08006085 	.word	0x08006085
 8006004:	08006077 	.word	0x08006077
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d037      	beq.n	800607c <UART_SetConfig+0xa34>
 800600c:	e03a      	b.n	8006084 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600e:	f7fc fd8f 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8006012:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006014:	e03c      	b.n	8006090 <UART_SetConfig+0xa48>
 8006016:	bf00      	nop
 8006018:	003d0900 	.word	0x003d0900
 800601c:	08006a18 	.word	0x08006a18
 8006020:	58024400 	.word	0x58024400
 8006024:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fc fd98 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 800602c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800602e:	e02f      	b.n	8006090 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006030:	f107 0314 	add.w	r3, r7, #20
 8006034:	4618      	mov	r0, r3
 8006036:	f7fd fd09 	bl	8003a4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800603e:	e027      	b.n	8006090 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006040:	f107 0308 	add.w	r3, r7, #8
 8006044:	4618      	mov	r0, r3
 8006046:	f7fd fe55 	bl	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800604e:	e01f      	b.n	8006090 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <UART_SetConfig+0xabc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800605c:	4b29      	ldr	r3, [pc, #164]	; (8006104 <UART_SetConfig+0xabc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	08db      	lsrs	r3, r3, #3
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	4a28      	ldr	r2, [pc, #160]	; (8006108 <UART_SetConfig+0xac0>)
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800606e:	e00f      	b.n	8006090 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8006070:	4b25      	ldr	r3, [pc, #148]	; (8006108 <UART_SetConfig+0xac0>)
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006074:	e00c      	b.n	8006090 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006076:	4b25      	ldr	r3, [pc, #148]	; (800610c <UART_SetConfig+0xac4>)
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800607a:	e009      	b.n	8006090 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006082:	e005      	b.n	8006090 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800608e:	bf00      	nop
    }

    if (pclk != 0U)
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d021      	beq.n	80060da <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <UART_SetConfig+0xac8>)
 800609c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	441a      	add	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d908      	bls.n	80060d4 <UART_SetConfig+0xa8c>
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c8:	d204      	bcs.n	80060d4 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d0:	60da      	str	r2, [r3, #12]
 80060d2:	e002      	b.n	80060da <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80060f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3738      	adds	r7, #56	; 0x38
 80060fe:	46bd      	mov	sp, r7
 8006100:	bdb0      	pop	{r4, r5, r7, pc}
 8006102:	bf00      	nop
 8006104:	58024400 	.word	0x58024400
 8006108:	03d09000 	.word	0x03d09000
 800610c:	003d0900 	.word	0x003d0900
 8006110:	08006a18 	.word	0x08006a18

08006114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01a      	beq.n	800622a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006212:	d10a      	bne.n	800622a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af02      	add	r7, sp, #8
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006268:	f7fb f992 	bl	8001590 <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b08      	cmp	r3, #8
 800627a:	d10e      	bne.n	800629a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f82c 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e022      	b.n	80062e0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d10e      	bne.n	80062c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f816 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e00c      	b.n	80062e0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f8:	e062      	b.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d05e      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006302:	f7fb f945 	bl	8001590 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	429a      	cmp	r2, r3
 8006310:	d302      	bcc.n	8006318 <UART_WaitOnFlagUntilTimeout+0x30>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d11d      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006326:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0201 	bic.w	r2, r2, #1
 8006336:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2220      	movs	r2, #32
 8006344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e045      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	d02e      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800636c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006370:	d126      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800637a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800638a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e00f      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d08d      	beq.n	80062fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80063f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fe:	2b22      	cmp	r3, #34	; 0x22
 8006400:	d13b      	bne.n	800647a <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800640a:	89bb      	ldrh	r3, [r7, #12]
 800640c:	b2d9      	uxtb	r1, r3
 800640e:	89fb      	ldrh	r3, [r7, #14]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006416:	400a      	ands	r2, r1
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d122      	bne.n	800648a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006452:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff f8de 	bl	8005634 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006478:	e007      	b.n	800648a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0208 	orr.w	r2, r2, #8
 8006488:	619a      	str	r2, [r3, #24]
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064a0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a8:	2b22      	cmp	r3, #34	; 0x22
 80064aa:	d13b      	bne.n	8006524 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80064ba:	89ba      	ldrh	r2, [r7, #12]
 80064bc:	89fb      	ldrh	r3, [r7, #14]
 80064be:	4013      	ands	r3, r2
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	1c9a      	adds	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d122      	bne.n	8006534 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064fc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff f889 	bl	8005634 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006522:	e007      	b.n	8006534 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0208 	orr.w	r2, r2, #8
 8006532:	619a      	str	r2, [r3, #24]
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800654a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006552:	2b22      	cmp	r3, #34	; 0x22
 8006554:	d166      	bne.n	8006624 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800655c:	81fb      	strh	r3, [r7, #14]
 800655e:	e03d      	b.n	80065dc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006568:	893b      	ldrh	r3, [r7, #8]
 800656a:	b2d9      	uxtb	r1, r3
 800656c:	89bb      	ldrh	r3, [r7, #12]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006574:	400a      	ands	r2, r1
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d119      	bne.n	80065d6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065b0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6899      	ldr	r1, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b1f      	ldr	r3, [pc, #124]	; (800663c <UART_RxISR_8BIT_FIFOEN+0x100>)
 80065be:	400b      	ands	r3, r1
 80065c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff f82f 	bl	8005634 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80065d6:	89fb      	ldrh	r3, [r7, #14]
 80065d8:	3b01      	subs	r3, #1
 80065da:	81fb      	strh	r3, [r7, #14]
 80065dc:	89fb      	ldrh	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1be      	bne.n	8006560 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065e8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80065ea:	897b      	ldrh	r3, [r7, #10]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d021      	beq.n	8006634 <UART_RxISR_8BIT_FIFOEN+0xf8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065f6:	897a      	ldrh	r2, [r7, #10]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d21b      	bcs.n	8006634 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800660a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8006610:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0220 	orr.w	r2, r2, #32
 8006620:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006622:	e007      	b.n	8006634 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0208 	orr.w	r2, r2, #8
 8006632:	619a      	str	r2, [r3, #24]
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	effffffe 	.word	0xeffffffe
 8006640:	080063e9 	.word	0x080063e9

08006644 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006652:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665a:	2b22      	cmp	r3, #34	; 0x22
 800665c:	d166      	bne.n	800672c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006664:	82fb      	strh	r3, [r7, #22]
 8006666:	e03d      	b.n	80066e4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006676:	8a3a      	ldrh	r2, [r7, #16]
 8006678:	8abb      	ldrh	r3, [r7, #20]
 800667a:	4013      	ands	r3, r2
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006686:	1c9a      	adds	r2, r3, #2
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d119      	bne.n	80066de <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066b8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <UART_RxISR_16BIT_FIFOEN+0x100>)
 80066c6:	400b      	ands	r3, r1
 80066c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fe ffab 	bl	8005634 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80066de:	8afb      	ldrh	r3, [r7, #22]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	82fb      	strh	r3, [r7, #22]
 80066e4:	8afb      	ldrh	r3, [r7, #22]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1be      	bne.n	8006668 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066f0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066f2:	8a7b      	ldrh	r3, [r7, #18]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d021      	beq.n	800673c <UART_RxISR_16BIT_FIFOEN+0xf8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066fe:	8a7a      	ldrh	r2, [r7, #18]
 8006700:	429a      	cmp	r2, r3
 8006702:	d21b      	bcs.n	800673c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006712:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a0c      	ldr	r2, [pc, #48]	; (8006748 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8006718:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0220 	orr.w	r2, r2, #32
 8006728:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800672a:	e007      	b.n	800673c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0208 	orr.w	r2, r2, #8
 800673a:	619a      	str	r2, [r3, #24]
}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	effffffe 	.word	0xeffffffe
 8006748:	08006493 	.word	0x08006493

0800674c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_UARTEx_DisableFifoMode+0x16>
 800675e:	2302      	movs	r3, #2
 8006760:	e027      	b.n	80067b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2224      	movs	r2, #36	; 0x24
 800676e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006790:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e02d      	b.n	8006832 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2224      	movs	r2, #36	; 0x24
 80067e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f850 	bl	80068b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800684e:	2302      	movs	r3, #2
 8006850:	e02d      	b.n	80068ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2224      	movs	r2, #36	; 0x24
 800685e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0201 	bic.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f812 	bl	80068b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b089      	sub	sp, #36	; 0x24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80068c0:	4a2f      	ldr	r2, [pc, #188]	; (8006980 <UARTEx_SetNbDataToProcess+0xc8>)
 80068c2:	f107 0314 	add.w	r3, r7, #20
 80068c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80068ce:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <UARTEx_SetNbDataToProcess+0xcc>)
 80068d0:	f107 030c 	add.w	r3, r7, #12
 80068d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d108      	bne.n	80068f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068f4:	e03d      	b.n	8006972 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068f6:	2310      	movs	r3, #16
 80068f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068fa:	2310      	movs	r3, #16
 80068fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	0e5b      	lsrs	r3, r3, #25
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	0f5b      	lsrs	r3, r3, #29
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800691e:	7fbb      	ldrb	r3, [r7, #30]
 8006920:	7f3a      	ldrb	r2, [r7, #28]
 8006922:	f107 0120 	add.w	r1, r7, #32
 8006926:	440a      	add	r2, r1
 8006928:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800692c:	fb02 f303 	mul.w	r3, r2, r3
 8006930:	7f3a      	ldrb	r2, [r7, #28]
 8006932:	f107 0120 	add.w	r1, r7, #32
 8006936:	440a      	add	r2, r1
 8006938:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800693c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006948:	7ffb      	ldrb	r3, [r7, #31]
 800694a:	7f7a      	ldrb	r2, [r7, #29]
 800694c:	f107 0120 	add.w	r1, r7, #32
 8006950:	440a      	add	r2, r1
 8006952:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	7f7a      	ldrb	r2, [r7, #29]
 800695c:	f107 0120 	add.w	r1, r7, #32
 8006960:	440a      	add	r2, r1
 8006962:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006966:	fb93 f3f2 	sdiv	r3, r3, r2
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006972:	bf00      	nop
 8006974:	3724      	adds	r7, #36	; 0x24
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	080069f8 	.word	0x080069f8
 8006984:	08006a00 	.word	0x08006a00

08006988 <__libc_init_array>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	4d0d      	ldr	r5, [pc, #52]	; (80069c0 <__libc_init_array+0x38>)
 800698c:	4c0d      	ldr	r4, [pc, #52]	; (80069c4 <__libc_init_array+0x3c>)
 800698e:	1b64      	subs	r4, r4, r5
 8006990:	10a4      	asrs	r4, r4, #2
 8006992:	2600      	movs	r6, #0
 8006994:	42a6      	cmp	r6, r4
 8006996:	d109      	bne.n	80069ac <__libc_init_array+0x24>
 8006998:	4d0b      	ldr	r5, [pc, #44]	; (80069c8 <__libc_init_array+0x40>)
 800699a:	4c0c      	ldr	r4, [pc, #48]	; (80069cc <__libc_init_array+0x44>)
 800699c:	f000 f820 	bl	80069e0 <_init>
 80069a0:	1b64      	subs	r4, r4, r5
 80069a2:	10a4      	asrs	r4, r4, #2
 80069a4:	2600      	movs	r6, #0
 80069a6:	42a6      	cmp	r6, r4
 80069a8:	d105      	bne.n	80069b6 <__libc_init_array+0x2e>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b0:	4798      	blx	r3
 80069b2:	3601      	adds	r6, #1
 80069b4:	e7ee      	b.n	8006994 <__libc_init_array+0xc>
 80069b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ba:	4798      	blx	r3
 80069bc:	3601      	adds	r6, #1
 80069be:	e7f2      	b.n	80069a6 <__libc_init_array+0x1e>
 80069c0:	08006a38 	.word	0x08006a38
 80069c4:	08006a38 	.word	0x08006a38
 80069c8:	08006a38 	.word	0x08006a38
 80069cc:	08006a3c 	.word	0x08006a3c

080069d0 <memset>:
 80069d0:	4402      	add	r2, r0
 80069d2:	4603      	mov	r3, r0
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d100      	bne.n	80069da <memset+0xa>
 80069d8:	4770      	bx	lr
 80069da:	f803 1b01 	strb.w	r1, [r3], #1
 80069de:	e7f9      	b.n	80069d4 <memset+0x4>

080069e0 <_init>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr

080069ec <_fini>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	bf00      	nop
 80069f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f2:	bc08      	pop	{r3}
 80069f4:	469e      	mov	lr, r3
 80069f6:	4770      	bx	lr
